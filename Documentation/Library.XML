<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Accessor">
            <summary>
            This class holds a data type name
            and a counter to select one element from a specific list
            with the same data type item
            </summary>
        </member>
        <member name="F:Library.Accessor.dataTypeName">
            <summary>
            Index name for data type holder
            </summary>
        </member>
        <member name="F:Library.Accessor.uniqueName">
            <summary>
            Index name for the counting item from the data type list related
            </summary>
        </member>
        <member name="M:Library.Accessor.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="type">data type</param>
            <param name="u">string</param>
        </member>
        <member name="M:Library.Accessor.#ctor(System.Collections.Generic.List{Library.MasterPage},System.String)">
            <summary>
            Constructor for an accessor with a master page
            </summary>
            <param name="mp">master page list</param>
            <param name="u">unique name to search</param>
        </member>
        <member name="M:Library.Accessor.#ctor(System.Collections.Generic.List{Library.MasterObject},System.String)">
            <summary>
            Constructor for an accessor with a master object
            </summary>
            <param name="mo">master object list</param>
            <param name="u">unique name to search</param>
        </member>
        <member name="M:Library.Accessor.#ctor(System.Collections.Generic.List{Library.Page},System.String)">
            <summary>
            Constructor for an accessor with a page
            </summary>
            <param name="p">page list</param>
            <param name="u">unique name to search</param>
        </member>
        <member name="M:Library.Accessor.#ctor(System.Collections.Generic.List{Library.HTMLTool},System.String)">
            <summary>
            Constructor for an accessor with a tool
            </summary>
            <param name="t">tool list</param>
            <param name="u">unique name to search</param>
        </member>
        <member name="M:Library.Accessor.#ctor(System.Collections.Generic.List{Library.HTMLObject},System.String)">
            <summary>
            Constructor for an accessor with an instance
            </summary>
            <param name="o">instance list</param>
            <param name="u">unique name to search</param>
        </member>
        <member name="M:Library.Accessor.#ctor(System.Collections.Generic.List{Library.File},System.String)">
            <summary>
            Constructor for an accessor with a file
            </summary>
            <param name="f">file list</param>
            <param name="u">unique name to search</param>
        </member>
        <member name="M:Library.Accessor.GetObject(Library.Project)">
            <summary>
            Gets the requested object
            </summary>
            <param name="p">project input</param>
            <returns>an object into this project</returns>
        </member>
        <member name="T:Library.BorderConstraint">
            <summary>
            Border constraint
            A border is a space with a colored pen that changes
            the size of the content or container
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.parent">
            <summary>
            Parent (container)
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.quotientWidth">
            <summary>
            quotient
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.quotientHeight">
            <summary>
            quotient
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.counterWidth">
            <summary>
            Counter
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.counterHeight">
            <summary>
            Counter
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.alreadyComputedWidth">
            <summary>
            Previous
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.alreadyComputedHeight">
            <summary>
            Previous
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.masterBorderWidth">
            <summary>
            Relative to a master page or a master object
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.masterBorderHeight">
            <summary>
            Relative to a master page or a master object
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.totalCountLines">
            <summary>
            Count of lines and columns
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.totalCountColumns">
            <summary>
            Count of lines and columns
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.horizBorderWidth">
            <summary>
            Horizontal area
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.horizBorderHeight">
            <summary>
            Horizontal area
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.countLines">
            <summary>
            Count of lines
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.vertBorderWidth">
            <summary>
            Vertical area
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.vertBorderHeight">
            <summary>
            Vertical area
            </summary>
        </member>
        <member name="F:Library.BorderConstraint.countColumns">
            <summary>
            Count of columns
            </summary>
        </member>
        <member name="M:Library.BorderConstraint.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor with the size of border
            </summary>
            <param name="borderWidth">width size</param>
            <param name="borderHeight">height size</param>
            <param name="countLines">count of lines</param>
            <param name="countColumns">count of columns</param>
        </member>
        <member name="M:Library.BorderConstraint.#ctor(Library.BorderConstraint,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor with a border constraint parent and a new horizontal border
            </summary>
            <param name="parent">parent</param>
            <param name="borderWidth">width size</param>
            <param name="borderHeight">height size</param>
            <param name="countLines">count of lines</param>
        </member>
        <member name="M:Library.BorderConstraint.#ctor(Library.BorderConstraint,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor with a border constraint parent and a new horizontal and vertical border
            </summary>
            <param name="parent">parent</param>
            <param name="borderWidth">width size</param>
            <param name="borderHeight">height size</param>
            <param name="countLines">count of lines</param>
            <param name="countColumns">count of columns</param>
        </member>
        <member name="M:Library.BorderConstraint.#ctor(Library.BorderConstraint)">
            <summary>
            Create a border constraint with an
            existing parent constraint
            </summary>
            <param name="parent">parent</param>
        </member>
        <member name="M:Library.BorderConstraint.AugmentCounterWidth(System.UInt32)">
            <summary>
            Add counter width to the parent constraint
            </summary>
            <param name="timing">move</param>
        </member>
        <member name="M:Library.BorderConstraint.AugmentCounterHeight(System.UInt32)">
            <summary>
            Add counter width to the parent constraint
            </summary>
            <param name="timing">move</param>
        </member>
        <member name="M:Library.BorderConstraint.CompareCounterHeight(System.UInt32)">
            <summary>
            Compare the parent counter height with this maximum value
            </summary>
            <param name="maximum">maximum value</param>
            <returns>true if lesser</returns>
        </member>
        <member name="M:Library.BorderConstraint.CompareCounterWidth(System.UInt32)">
            <summary>
            Compare the parent counter width with this maximum value
            </summary>
            <param name="maximum">maximum value</param>
            <returns>true if lesser</returns>
        </member>
        <member name="M:Library.BorderConstraint.LimitedCounterWidth(System.UInt32,System.UInt32)">
            <summary>
            Lorsqu'il faut augmenter la taille du bord
            pour que l'ensemble reste homogène
            </summary>
            <param name="timing">move value</param>
            <param name="maximum">maximum value admitted</param>
            <returns>grown size</returns>
        </member>
        <member name="M:Library.BorderConstraint.LimitedCounterHeight(System.UInt32,System.UInt32)">
            <summary>
            Lorsqu'il faut augmenter la taille du bord
            pour que l'ensemble reste homogène
            </summary>
            <param name="timing">move value</param>
            <param name="maximum">maximum value admitted</param>
            <returns>grown size</returns>
        </member>
        <member name="M:Library.BorderConstraint.ChangeTotalCountColumns(System.UInt32)">
            <summary>
            Replace total count columns
            </summary>
            <param name="totalCountColumns">new value</param>
        </member>
        <member name="M:Library.BorderConstraint.ComputeBorderWidthForMaster(System.UInt32)">
            <summary>
            Border remaining between master and this width
            </summary>
            <param name="width">width</param>
            <returns>the remainer width</returns>
        </member>
        <member name="M:Library.BorderConstraint.RemoveBorderWidthForMaster(System.UInt32)">
            <summary>
            Remove this border width and leave all to master
            </summary>
            <param name="width">width</param>
            <returns>new border size</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeBorderHeightForMaster(System.UInt32)">
            <summary>
            Border remaining between master and this height
            </summary>
            <param name="height">height</param>
            <returns>the remainer height</returns>
        </member>
        <member name="M:Library.BorderConstraint.RemoveBorderHeightForMaster(System.UInt32)">
            <summary>
            Remove this border height and leave all to master
            </summary>
            <param name="height">height</param>
            <returns>new border size</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeBorderWidthForHorizontalZone(System.UInt32)">
            <summary>
            Border remaining between master, horizontal area and this width
            </summary>
            <param name="width">width</param>
            <returns>the remainer width</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeBorderHeightForHorizontalZone(System.UInt32)">
            <summary>
            Border remaining between master, horizontal area and this height
            </summary>
            <param name="height">height</param>
            <returns>new size value</returns>
        </member>
        <member name="M:Library.BorderConstraint.RemoveBorderWidthForHorizontalZone(System.UInt32)">
            <summary>
            Remove this border width and leave all to master
            </summary>
            <param name="width">width</param>
            <returns>new border size</returns>
        </member>
        <member name="M:Library.BorderConstraint.RemoveBorderHeightForHorizontalZone(System.UInt32)">
            <summary>
            Remove this border with and leave all to master
            </summary>
            <param name="height">height</param>
            <returns>new border size</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeQuotientForHorizontalZone(System.UInt32)">
            <summary>
            Computes quotient for horizontal area
            </summary>
            <param name="countLines">count of lines</param>
            <returns>quotient</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeBorderHeightForVerticalZone(System.UInt32)">
            <summary>
            Border remaining between master, vertical area and this height
            </summary>
            <param name="height">height</param>
            <returns>new size value</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputerBorderWidthForVerticalZone(System.UInt32)">
            <summary>
            Border remaining between master, vertical area and this width
            </summary>
            <param name="width">width</param>
            <returns>new size value</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeBorderWidthForObject(System.UInt32)">
            <summary>
            Compute the final border width for content
            </summary>
            <param name="width">origin width</param>
            <returns>new width</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputerBorderHeightForObject(System.UInt32)">
            <summary>
            Compute the final border height for content
            </summary>
            <param name="height">origin height</param>
            <returns>new height</returns>
        </member>
        <member name="M:Library.BorderConstraint.ComputeQuotientForVerticalZone">
            <summary>
            Computes quotient for vertical area
            </summary>
            <returns>quotient</returns>
        </member>
        <member name="M:Library.BorderConstraint.CreateBorderConstraint(Library.CodeCSS,System.UInt32,System.UInt32)">
            <summary>
            Static constructor from a css, the total number of lines and columns
            </summary>
            <param name="css">css</param>
            <param name="totalLines">total number of lines</param>
            <param name="totalColumns">total number of columns</param>
            <returns>Border constraint</returns>
        </member>
        <member name="M:Library.BorderConstraint.CreateBorderConstraint(Library.BorderConstraint,Library.CodeCSS,System.UInt32)">
            <summary>
            Static constructor from a parent border constraint, a css, the number of lines
            </summary>
            <param name="parent">parent constraint</param>
            <param name="css">css</param>
            <param name="countLines">number of lines</param>
            <returns>Border constraint</returns>
        </member>
        <member name="M:Library.BorderConstraint.CreateBorderConstraint(Library.BorderConstraint,Library.CodeCSS,System.UInt32,System.UInt32)">
            <summary>
            Static constructor from a parent border constraint, a css, the number of lines and columns
            </summary>
            <param name="parent">parent constraint</param>
            <param name="css">css</param>
            <param name="countLines">number of lines</param>
            <param name="countColumns">number of columns</param>
            <returns>Border constraint</returns>
        </member>
        <member name="M:Library.BorderConstraint.CreateBorderConstraint(Library.BorderConstraint)">
            <summary>
            Border Constraint from a parent
            </summary>
            <param name="parent">parent</param>
            <returns>new border constraint</returns>
        </member>
        <member name="T:Library.CadreModel">
            <summary>
            Cadre model form to create a sculpture
            and generate a complete or partial form of an html page, master page, master object or a tool
            </summary>
        </member>
        <member name="F:Library.CadreModel.counter">
            <summary>
            Static Counter
            </summary>
        </member>
        <member name="F:Library.CadreModel.aimentedDistance">
            <summary>
            Distance minimum under two objects are collapsed
            </summary>
        </member>
        <member name="F:Library.CadreModel.nameName">
            <summary>
            Index name for name
            </summary>
        </member>
        <member name="F:Library.CadreModel.modelTypesName">
            <summary>
            Index name for existing standard model
            </summary>
        </member>
        <member name="F:Library.CadreModel.selectedModelTypeName">
            <summary>
            Index name for select the desired model type
            </summary>
        </member>
        <member name="F:Library.CadreModel.widthName">
            <summary>
            Index name for width
            </summary>
        </member>
        <member name="F:Library.CadreModel.heightName">
            <summary>
            Index name for height
            </summary>
        </member>
        <member name="F:Library.CadreModel.paddingWidthName">
            <summary>
            Index name for padding width
            </summary>
        </member>
        <member name="F:Library.CadreModel.paddingHeightName">
            <summary>
            Index name for padding height
            </summary>
        </member>
        <member name="F:Library.CadreModel.positionWidthName">
            <summary>
            Index name for position width
            </summary>
        </member>
        <member name="F:Library.CadreModel.positionHeightName">
            <summary>
            Index name for position height
            </summary>
        </member>
        <member name="F:Library.CadreModel.borderWidthName">
            <summary>
            Index name for border width
            </summary>
        </member>
        <member name="F:Library.CadreModel.borderHeightName">
            <summary>
            Index name for border height
            </summary>
        </member>
        <member name="F:Library.CadreModel.contactWidthName">
            <summary>
            Index name for contact width
            </summary>
        </member>
        <member name="F:Library.CadreModel.contactHeightName">
            <summary>
            Index name for contact height
            </summary>
        </member>
        <member name="F:Library.CadreModel.backgroundColorName">
            <summary>
            Index name for background color
            </summary>
        </member>
        <member name="F:Library.CadreModel.foregroundColorName">
            <summary>
            Index name for foreground color
            </summary>
        </member>
        <member name="F:Library.CadreModel.borderColorName">
            <summary>
            Index name for border color
            </summary>
        </member>
        <member name="F:Library.CadreModel.indexName">
            <summary>
            Index name for index position of this object from the list
            </summary>
        </member>
        <member name="F:Library.CadreModel.suspendBindingName">
            <summary>
            Index name for suspending binding switch
            </summary>
        </member>
        <member name="F:Library.CadreModel.isGroupName">
            <summary>
            Index name for group switch
            </summary>
        </member>
        <member name="F:Library.CadreModel.groupIndexName">
            <summary>
            Index name for group index
            </summary>
        </member>
        <member name="F:Library.CadreModel.updated">
            <summary>
            Event handler when a cadre model was updated
            </summary>
        </member>
        <member name="F:Library.CadreModel.propertyChanged">
            <summary>
            Event handler when a property of a cadre model has changed
            </summary>
        </member>
        <member name="M:Library.CadreModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Library.CadreModel.#ctor(Library.CadreModel)">
            <summary>
            Copy constructor
            </summary>
            <param name="cm">object source</param>
        </member>
        <member name="M:Library.CadreModel.UpdateProperty(System.String)">
            <summary>
            Update property
            </summary>
            <param name="name">property name</param>
        </member>
        <member name="M:Library.CadreModel.RaisePropertyChanged">
            <summary>
            Raise property changed event
            </summary>
        </member>
        <member name="M:Library.CadreModel.AimentedMove">
            <summary>
            Gets aimented move
            </summary>
        </member>
        <member name="M:Library.CadreModel.ClearEvents">
            <summary>
            Clear events
            </summary>
        </member>
        <member name="M:Library.CadreModel.CopyProperties(Library.HTMLObject)">
            <summary>
            Copy properties
            </summary>
            <param name="obj">html object</param>
        </member>
        <member name="M:Library.CadreModel.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="M:Library.CadreModel.ReinitCounter(System.Int32)">
            <summary>
            Reinitialize counter
            Used just after an opened project
            </summary>
            <param name="value">value to set</param>
        </member>
        <member name="P:Library.CadreModel.SuspendBinding">
            <summary>
            Gets or sets Suspending binding switch
            </summary>
        </member>
        <member name="P:Library.CadreModel.Name">
            <summary>
            Gets or sets the name of this cadre model
            </summary>
        </member>
        <member name="P:Library.CadreModel.ModelTypes">
            <summary>
            List of available model types
            </summary>
        </member>
        <member name="P:Library.CadreModel.SelectedModelTypeIndex">
            <summary>
            Gets or sets the selected model type
            </summary>
        </member>
        <member name="P:Library.CadreModel.SelectedModelTypeObject">
            <summary>
            Gets or sets the selected model object
            </summary>
        </member>
        <member name="P:Library.CadreModel.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.CadreModel.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.CadreModel.WidthContact">
            <summary>
            Gets or sets the width contact
            </summary>
        </member>
        <member name="P:Library.CadreModel.HeightContact">
            <summary>
            Gets or sets the height contact
            </summary>
        </member>
        <member name="P:Library.CadreModel.WidthPadding">
            <summary>
            Gets or sets the width padding
            </summary>
        </member>
        <member name="P:Library.CadreModel.HeightPadding">
            <summary>
            Gets or sets the height padding
            </summary>
        </member>
        <member name="P:Library.CadreModel.WidthPosition">
            <summary>
            Gets or sets the width position
            </summary>
        </member>
        <member name="P:Library.CadreModel.HeightPosition">
            <summary>
            Gets or sets the height position
            </summary>
        </member>
        <member name="P:Library.CadreModel.WidthBorder">
            <summary>
            Gets or sets the width border
            </summary>
        </member>
        <member name="P:Library.CadreModel.HeightBorder">
            <summary>
            Gets or sets the height border
            </summary>
        </member>
        <member name="P:Library.CadreModel.Foreground">
            <summary>
            Gets or sets the foreground color
            </summary>
        </member>
        <member name="P:Library.CadreModel.Background">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:Library.CadreModel.Border">
            <summary>
            Gets or sets the border color
            </summary>
        </member>
        <member name="P:Library.CadreModel.Index">
            <summary>
            Gets the index
            </summary>
        </member>
        <member name="P:Library.CadreModel.IsGroup">
            <summary>
            Gets or sets the group switch
            </summary>
        </member>
        <member name="P:Library.CadreModel.IndexGroup">
            <summary>
            Gets or sets the index group
            </summary>
        </member>
        <member name="E:Library.CadreModel.PropertyChanged">
            <summary>
            Event property changed
            </summary>
        </member>
        <member name="E:Library.CadreModel.Updated">
            <summary>
            Event after update
            </summary>
        </member>
        <member name="T:Library.PlacementModel">
            <summary>
            Placement Method
            </summary>
        </member>
        <member name="F:Library.PlacementModel.list">
            <summary>
            Linked list of vertical placement
            </summary>
        </member>
        <member name="M:Library.PlacementModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Library.PlacementModel.InspectQuadrille(Library.PlacementModel.PlacementItem)">
            <summary>
            Inspect content
            </summary>
            <param name="p">placement</param>
        </member>
        <member name="M:Library.PlacementModel.Add(Library.CadreModel,System.Single)">
            <summary>
            Add a new element
            Create a new placement item, set update position changed event
            and place item
            </summary>
            <param name="cm">new cadre model</param>
            <param name="ratio">ratio</param>
        </member>
        <member name="M:Library.PlacementModel.ComputeMixedZones">
            <summary>
            Computes all areas
            This function is not terminated.
            When two elements intersects each other, it takes a zIndex (3D)
            </summary>
        </member>
        <member name="T:Library.PlacementModel.MixedZone">
            <summary>
            Une classe MixedZone est un quadrillage
            des objets placés n'importe comment
            </summary>
        </member>
        <member name="F:Library.PlacementModel.MixedZone.hPosition">
            <summary>
            Position in pixel
            </summary>
        </member>
        <member name="F:Library.PlacementModel.MixedZone.vPosition">
            <summary>
            Position in pixel
            </summary>
        </member>
        <member name="M:Library.PlacementModel.MixedZone.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="h">width</param>
            <param name="v">height</param>
        </member>
        <member name="M:Library.PlacementModel.MixedZone.Move(System.Int32,System.Int32)">
            <summary>
            Move to new position
            </summary>
            <param name="h">new width</param>
            <param name="v">new height</param>
        </member>
        <member name="P:Library.PlacementModel.MixedZone.HorizontalPosition">
            <summary>
            Gets the width position
            </summary>
        </member>
        <member name="P:Library.PlacementModel.MixedZone.VerticalPosition">
            <summary>
            Get the height position
            </summary>
        </member>
        <member name="T:Library.PlacementModel.PlacementItem">
            <summary>
            Un élément de placement contient un cadre
            </summary>
        </member>
        <member name="F:Library.PlacementModel.PlacementItem.rect">
            <summary>
            A rectangular area
            </summary>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.#ctor(Library.CadreModel,System.Single)">
            <summary>
            Default constructor
            </summary>
            <param name="cm">cadre model</param>
            <param name="ratio">ratio</param>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.Equals(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Retourne vrai si les deux rectangles s'intersectent
            </summary>
            <param name="x">rectangle 1</param>
            <param name="y">rectangle 2</param>
            <returns>vrai ou faux</returns>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.GetHashCode(System.Drawing.RectangleF)">
            <summary>
            Computes an hash code that reduces sort algorithm
            </summary>
            <param name="obj">input</param>
            <returns>hash code</returns>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.CompareWidth(Library.PlacementModel.PlacementItem,Library.PlacementModel.PlacementItem)">
            <summary>
            Compare deux éléments en largeur
            </summary>
            <param name="x">élément 1</param>
            <param name="y">élément 2</param>
            <returns>x=y 0, x &gt; y 1 ou x &lt; y -1</returns>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.CompareHeight(Library.PlacementModel.PlacementItem,Library.PlacementModel.PlacementItem)">
            <summary>
            Compare deux éléments en hauteur
            </summary>
            <param name="x">élément 1</param>
            <param name="y">élément 2</param>
            <returns>x=y 0, x &gt; y 1 ou x &lt; y -1</returns>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.CompareWidth(Library.PlacementModel.PlacementItem)">
            <summary>
            Compare l'objet avec un autre
            </summary>
            <param name="other">autre</param>
            <returns>0, 1 ou -1</returns>
        </member>
        <member name="M:Library.PlacementModel.PlacementItem.CompareHeight(Library.PlacementModel.PlacementItem)">
            <summary>
            Compare l'objet avec un autre
            </summary>
            <param name="other">autre</param>
            <returns>0, 1 ou -1</returns>
        </member>
        <member name="T:Library.PlacementModel.PositionArgs">
            <summary>
            Indique l'ancienne et la nouvelle position
            lorsque la position d'un élément de placement change
            </summary>
        </member>
        <member name="F:Library.PlacementModel.PositionArgs.oldValue">
            <summary>
            old value
            </summary>
        </member>
        <member name="F:Library.PlacementModel.PositionArgs.newValue">
            <summary>
            new value
            </summary>
        </member>
        <member name="M:Library.PlacementModel.PositionArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="oldValue">old value</param>
            <param name="newValue">new value</param>
        </member>
        <member name="P:Library.PlacementModel.PositionArgs.OldPosition">
            <summary>
            Gets old position
            </summary>
        </member>
        <member name="P:Library.PlacementModel.PositionArgs.NewPosition">
            <summary>
            Gets new position
            </summary>
        </member>
        <member name="T:Library.PlacementModel.HorizontalPlacementItem">
            <summary>
            Lignes horizontales des éléments
            </summary>
        </member>
        <member name="F:Library.PlacementModel.HorizontalPlacementItem.oldValue">
            <summary>
            Old and new position
            </summary>
        </member>
        <member name="F:Library.PlacementModel.HorizontalPlacementItem.newValue">
            <summary>
            Old and new position
            </summary>
        </member>
        <member name="F:Library.PlacementModel.HorizontalPlacementItem.position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Library.PlacementModel.HorizontalPlacementItem.item">
            <summary>
            Element à placer
            </summary>
        </member>
        <member name="M:Library.PlacementModel.HorizontalPlacementItem.#ctor(Library.PlacementModel.PlacementItem)">
            <summary>
            Default constructor
            </summary>
            <param name="item">élement à placer</param>
        </member>
        <member name="M:Library.PlacementModel.HorizontalPlacementItem.action(System.Object,Library.PlacementModel.PositionArgs)">
            <summary>
            Action position changed
            </summary>
            <param name="sender">origin</param>
            <param name="e">args</param>
        </member>
        <member name="E:Library.PlacementModel.HorizontalPlacementItem.positionChanged">
            <summary>
            Event when position has changed
            </summary>
        </member>
        <member name="P:Library.PlacementModel.HorizontalPlacementItem.Position">
            <summary>
            Gets or sets position
            </summary>
        </member>
        <member name="P:Library.PlacementModel.HorizontalPlacementItem.Item">
            <summary>
            Gets item
            </summary>
        </member>
        <member name="E:Library.PlacementModel.HorizontalPlacementItem.PositionChanged">
            <summary>
            Add or remove event Position Changed
            </summary>
        </member>
        <member name="T:Library.PlacementModel.HorizontalComparer">
            <summary>
            Comparer for horizontal item
            </summary>
        </member>
        <member name="M:Library.PlacementModel.HorizontalComparer.Compare(System.Collections.Generic.LinkedList{Library.PlacementModel.HorizontalPlacementItem},Library.PlacementModel.HorizontalPlacementItem)">
            <summary>
            Insert a new horizontal placement from a linked list
            based on the comparison of the horizontal position
            </summary>
            <param name="list">list d'éléments horizontaux successifs</param>
            <param name="input">élément horizontal</param>
        </member>
        <member name="M:Library.PlacementModel.HorizontalComparer.Compare(Library.PlacementModel.HorizontalPlacementItem,Library.PlacementModel.HorizontalPlacementItem)">
            <summary>
            Compare two horizontal elements of placement
            </summary>
            <param name="x">placement item 1</param>
            <param name="y">placement item 2</param>
            <returns>1 or -1</returns>
        </member>
        <member name="T:Library.PlacementModel.VerticalPlacementItem">
            <summary>
            Lignes verticales des éléments
            </summary>
        </member>
        <member name="F:Library.PlacementModel.VerticalPlacementItem.oldValue">
            <summary>
            Old and new position
            </summary>
        </member>
        <member name="F:Library.PlacementModel.VerticalPlacementItem.newValue">
            <summary>
            Old and new position
            </summary>
        </member>
        <member name="F:Library.PlacementModel.VerticalPlacementItem.position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Library.PlacementModel.VerticalPlacementItem.list">
            <summary>
            Linked list of horizontal element
            </summary>
        </member>
        <member name="M:Library.PlacementModel.VerticalPlacementItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Library.PlacementModel.VerticalPlacementItem.action(System.Object,Library.PlacementModel.PositionArgs)">
            <summary>
            Action position changed
            </summary>
            <param name="sender">origin</param>
            <param name="e">args</param>
        </member>
        <member name="M:Library.PlacementModel.VerticalPlacementItem.Add(Library.PlacementModel.HorizontalPlacementItem)">
            <summary>
            Add a new horizontal item into this vertical item
            </summary>
            <param name="h">horizontal item</param>
        </member>
        <member name="M:Library.PlacementModel.VerticalPlacementItem.Compare(Library.PlacementModel.VerticalPlacementItem,Library.PlacementModel.VerticalPlacementItem)">
            <summary>
            Compare deux objets
            </summary>
            <param name="x">objet 1</param>
            <param name="y">objet 2</param>
            <returns>vrai ou faux</returns>
        </member>
        <member name="M:Library.PlacementModel.VerticalPlacementItem.Compare(Library.PlacementModel.VerticalPlacementItem)">
            <summary>
            Compare this with one another vertical item
            </summary>
            <param name="other">vertical item to compare</param>
            <returns>1 or -1</returns>
        </member>
        <member name="E:Library.PlacementModel.VerticalPlacementItem.positionChanged">
            <summary>
            Event when position has changed
            </summary>
        </member>
        <member name="P:Library.PlacementModel.VerticalPlacementItem.Items">
            <summary>
            Gets the linked list of horizontal item
            </summary>
        </member>
        <member name="P:Library.PlacementModel.VerticalPlacementItem.Position">
            <summary>
            Gets or sets position
            </summary>
        </member>
        <member name="P:Library.PlacementModel.VerticalPlacementItem.LessPosition">
            <summary>
            Compute the shortest position
            </summary>
        </member>
        <member name="E:Library.PlacementModel.VerticalPlacementItem.PositionChanged">
            <summary>
            Add or remove event Position Changed
            </summary>
        </member>
        <member name="T:Library.PlacementModel.VerticalComparer">
            <summary>
            Class for the vertical comparer
            </summary>
        </member>
        <member name="M:Library.PlacementModel.VerticalComparer.Compare(System.Collections.Generic.LinkedList{Library.PlacementModel.VerticalPlacementItem},Library.PlacementModel.PlacementItem)">
            <summary>
            Insert a placement item into the right horizontal placement item
            </summary>
            <param name="list">vertical placement</param>
            <param name="p">element to place</param>
        </member>
        <member name="M:Library.PlacementModel.VerticalComparer.Compare(Library.PlacementModel.VerticalPlacementItem,Library.PlacementModel.VerticalPlacementItem)">
            <summary>
            Compare two vertical elements of placement
            </summary>
            <param name="x">placement item 1</param>
            <param name="y">placement item 2</param>
            <returns>1 or -1</returns>
        </member>
        <member name="T:Library.CadreModelType">
            <summary>
            Cadre model type form to create a sculpture
            and generate a complete or partial form of an html page, master page, master object or a tool
            </summary>
        </member>
        <member name="F:Library.CadreModelType.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="F:Library.CadreModelType.Text">
            <summary>
            Texte
            </summary>
        </member>
        <member name="F:Library.CadreModelType.Tool">
            <summary>
            Tool
            </summary>
        </member>
        <member name="F:Library.CadreModelType.MasterObject">
            <summary>
            Master object
            </summary>
        </member>
        <member name="F:Library.CadreModelType.DynamicObject">
            <summary>
            Dynamic
            </summary>
        </member>
        <member name="F:Library.CadreModelType.propertyChanged">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:Library.CadreModelType.typeName">
            <summary>
            Index Name for type
            </summary>
        </member>
        <member name="F:Library.CadreModelType.contentName">
            <summary>
            Index Name for content
            </summary>
        </member>
        <member name="F:Library.CadreModelType.contentObjectName">
            <summary>
            Index Name for content object
            </summary>
        </member>
        <member name="M:Library.CadreModelType.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="type">type name</param>
        </member>
        <member name="M:Library.CadreModelType.#ctor(System.String,System.String,System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="type">type name</param>
            <param name="content">content string</param>
            <param name="obj">object as content</param>
        </member>
        <member name="M:Library.CadreModelType.UpdateProperty(System.String)">
            <summary>
            Update property
            </summary>
            <param name="name">property name</param>
        </member>
        <member name="M:Library.CadreModelType.Reinit">
            <summary>
            Reinitialization
            </summary>
        </member>
        <member name="M:Library.CadreModelType.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.CadreModelType.Type">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.CadreModelType.Content">
            <summary>
            Gets or sets the content string
            </summary>
        </member>
        <member name="P:Library.CadreModelType.DirectObject">
            <summary>
            Gets or sets object as content
            </summary>
        </member>
        <member name="E:Library.CadreModelType.PropertyChanged">
            <summary>
            Add or remove event Position Changed
            </summary>
        </member>
        <member name="T:Library.CodeCSS">
            <summary>
            Class to contain CSS keys
            </summary>
        </member>
        <member name="F:Library.CodeCSS.idsName">
            <summary>
            Index name for id
            Usefull to customize html tag
            </summary>
        </member>
        <member name="F:Library.CodeCSS.backgroundImageUrlName">
            <summary>
            Index name for an url background image
            </summary>
        </member>
        <member name="F:Library.CodeCSS.backgroundColorName">
            <summary>
            Index name for a background color
            </summary>
        </member>
        <member name="F:Library.CodeCSS.borderLeftColorName">
            <summary>
            Index name for a border left color
            </summary>
        </member>
        <member name="F:Library.CodeCSS.borderRightColorName">
            <summary>
            Index name for a border right color
            </summary>
        </member>
        <member name="F:Library.CodeCSS.borderTopColorName">
            <summary>
            Index name for a border top color
            </summary>
        </member>
        <member name="F:Library.CodeCSS.borderBottomColorName">
            <summary>
            Index name for a border bottom color
            </summary>
        </member>
        <member name="F:Library.CodeCSS.foregroundColorName">
            <summary>
            Index name for a foreground color
            </summary>
        </member>
        <member name="F:Library.CodeCSS.paddingName">
            <summary>
            Index name for a padding
            </summary>
        </member>
        <member name="F:Library.CodeCSS.marginName">
            <summary>
            Index name for a margin
            </summary>
        </member>
        <member name="F:Library.CodeCSS.borderName">
            <summary>
            Index name for a border
            </summary>
        </member>
        <member name="F:Library.CodeCSS.bodyName">
            <summary>
            Index name for the body
            </summary>
        </member>
        <member name="M:Library.CodeCSS.#ctor(Library.CodeCSS)">
            <summary>
            Copy constructor
            </summary>
            <param name="code">css source</param>
        </member>
        <member name="M:Library.CodeCSS.#ctor(System.String)">
            <summary>
            Constructor with a specific Id of html tag
            </summary>
            <param name="id">html tag id</param>
        </member>
        <member name="M:Library.CodeCSS.#ctor">
            <summary>
            Default constructor (addressed for the body of page)
            </summary>
        </member>
        <member name="M:Library.CodeCSS.AddIntoBody(System.String,System.String)">
            <summary>
            Add a property value to the CSS body
            </summary>
            <param name="name">property name</param>
            <param name="value">property value</param>
        </member>
        <member name="M:Library.CodeCSS.Discret(System.String,System.String)">
            <summary>
            Sets a property that can be border, padding, margin and colors
            </summary>
            <param name="name">property name</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Library.CodeCSS.IsBodyKey(System.String)">
            <summary>
            Test if a key exists into body
            </summary>
            <param name="key">key to search</param>
            <returns>true of false</returns>
        </member>
        <member name="M:Library.CodeCSS.GenerateCSS(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates the CSS code
            </summary>
            <param name="addDefaultKeys">add default keys</param>
            <param name="displayId">display id and print properties into</param>
            <param name="resolveConfig">transforms configuration keys to values</param>
            <returns>css string generated code output</returns>
        </member>
        <member name="M:Library.CodeCSS.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.CodeCSS.Ids">
            <summary>
            Gets or sets Id command
            CSS v3 valid declaration with multiple id
            </summary>
        </member>
        <member name="P:Library.CodeCSS.Body">
            <summary>
            Collection of CSS properties
            </summary>
        </member>
        <member name="P:Library.CodeCSS.Padding">
            <summary>
            Gets or sets the padding rectangle
            </summary>
        </member>
        <member name="P:Library.CodeCSS.Margin">
            <summary>
            Gets or sets margin rectangle
            </summary>
        </member>
        <member name="P:Library.CodeCSS.Border">
            <summary>
            Gets or sets border rectangle
            </summary>
        </member>
        <member name="P:Library.CodeCSS.BackgroundImageURL">
            <summary>
            Gets or sets the background url
            </summary>
        </member>
        <member name="P:Library.CodeCSS.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:Library.CodeCSS.ForegroundColor">
            <summary>
            Gets or sets the foreground color
            </summary>
        </member>
        <member name="P:Library.CodeCSS.BorderLeftColor">
            <summary>
            Gets or sets the border left color
            </summary>
        </member>
        <member name="P:Library.CodeCSS.BorderRightColor">
            <summary>
            Gets or sets the border right color
            </summary>
        </member>
        <member name="P:Library.CodeCSS.BorderTopColor">
            <summary>
            Gets or sets the border top color
            </summary>
        </member>
        <member name="P:Library.CodeCSS.BorderBottomColor">
            <summary>
            Gets or sets the border bottom color
            </summary>
        </member>
        <member name="T:Library.CodeJavaScript">
            <summary>
            Class container for JavaScript code
            </summary>
        </member>
        <member name="F:Library.CodeJavaScript.codeName">
            <summary>
            Index name to handle code data
            </summary>
        </member>
        <member name="M:Library.CodeJavaScript.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.CodeJavaScript.Code">
            <summary>
            Gets or sets the code
            </summary>
        </member>
        <member name="P:Library.CodeJavaScript.GeneratedCode">
            <summary>
            Gets the generated code
            Transforms all configuration keys by these values
            </summary>
        </member>
        <member name="T:Library.Configuration">
            <summary>
            Configuration element for a project
            </summary>
        </member>
        <member name="F:Library.Configuration.collectionName">
            <summary>
            Index name for collection
            </summary>
        </member>
        <member name="M:Library.Configuration.Replace(System.String)">
            <summary>
            Replace each name by its value
            </summary>
            <param name="input">input string</param>
            <returns>output</returns>
        </member>
        <member name="P:Library.Configuration.Elements">
            <summary>
            Gets elements
            </summary>
        </member>
        <member name="T:Library.ConstraintSize">
            <summary>
            Set of elements to compute size
            with respect of constraint enumeration
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.constraintWidth">
            <summary>
            Constraint with and height
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.constraintHeight">
            <summary>
            Constraint with and height
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.width">
            <summary>
            Width and height size
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.height">
            <summary>
            Width and height size
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.widthString">
            <summary>
            Width and height string representation
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.heightString">
            <summary>
            Width and height string representation
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.attributeWidth">
            <summary>
            Width and height attributes
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.attributeHeight">
            <summary>
            Width and height attributes
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.forcedWidth">
            <summary>
            force Width and height values
            </summary>
        </member>
        <member name="F:Library.ConstraintSize.forcedHeight">
            <summary>
            force Width and height values
            </summary>
        </member>
        <member name="M:Library.ConstraintSize.#ctor(Library.EnumConstraint,System.UInt32,System.UInt32,Library.EnumConstraint,System.UInt32,System.UInt32)">
            <summary>
            Default constructor
            </summary>
            <param name="constraintWidth">constraint width enumeration</param>
            <param name="width">width size</param>
            <param name="preceding_width">width size outbox</param>
            <param name="constraintHeight">constraint height enumeration</param>
            <param name="height">height size</param>
            <param name="preceding_height">height size outbox</param>
        </member>
        <member name="M:Library.ConstraintSize.ComputeStyle">
            <summary>
            Compute the string representation
            respect to constraint enumeration
            </summary>
            <returns>string form</returns>
        </member>
        <member name="T:Library.CSSColor">
            <summary>
            Keep a color
            </summary>
        </member>
        <member name="F:Library.CSSColor.colorName">
            <summary>
            Index name for color
            </summary>
        </member>
        <member name="M:Library.CSSColor.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.CSSColor.#ctor(System.Drawing.Color)">
            <summary>
            Constructor with a specific color
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Library.CSSColor.#ctor(System.String)">
            <summary>
            Constructor with a string representation of a color
            </summary>
            <param name="colorStr">color</param>
        </member>
        <member name="M:Library.CSSColor.ParseColor(System.String)">
            <summary>
            Parse color and return a new CSSColor
            </summary>
            <param name="colorValue">color value to parse</param>
            <returns>object result</returns>
        </member>
        <member name="M:Library.CSSColor.TryParse(System.String,Library.CSSColor@)">
            <summary>
            Try Parse : a same parsing fonction but
            do not raise an exception : return true if succeeded; the color result is a param out
            </summary>
            <param name="s">color value string</param>
            <param name="c">color solution</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Library.CSSColor.Clone">
            <summary>
            Clone the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Library.CSSColor.Color">
            <summary>
            Gets the color
            </summary>
        </member>
        <member name="P:Library.CSSColor.IsEmpty">
            <summary>
            Gets if this object has a setted color
            </summary>
        </member>
        <member name="T:Library.DesignPage">
            <summary>
            Structure to host properties across elements
            </summary>
        </member>
        <member name="F:Library.DesignPage.width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:Library.DesignPage.height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:Library.DesignPage.constraintWidth">
            <summary>
            Width constraint
            </summary>
        </member>
        <member name="F:Library.DesignPage.constraintHeight">
            <summary>
            Height constraint
            </summary>
        </member>
        <member name="F:Library.DesignPage.cssPart">
            <summary>
            Code CSS
            </summary>
        </member>
        <member name="F:Library.DesignPage.events">
            <summary>
            Evenements
            </summary>
        </member>
        <member name="F:Library.DesignPage.javascriptPart">
            <summary>
            Javascript code
            </summary>
        </member>
        <member name="F:Library.DesignPage.onload">
            <summary>
            Javascript on load code
            </summary>
        </member>
        <member name="F:Library.DesignPage.cssOnFile">
            <summary>
            Is CSS exported to a file
            </summary>
        </member>
        <member name="F:Library.DesignPage.cssFile">
            <summary>
            File name where resides CSS code
            </summary>
        </member>
        <member name="F:Library.DesignPage.javascriptOnFile">
            <summary>
            Is Javascript exported to a file
            </summary>
        </member>
        <member name="F:Library.DesignPage.javascriptFile">
            <summary>
            File name where resides Javascript code
            </summary>
        </member>
        <member name="F:Library.DesignPage.zones">
            <summary>
            Horizontal areas
            </summary>
        </member>
        <member name="F:Library.DesignPage.includeContainer">
            <summary>
            Is include into a container
            </summary>
        </member>
        <member name="F:Library.DesignPage.subObjects">
            <summary>
            All objects
            </summary>
        </member>
        <member name="T:Library.Disposition">
            <summary>
            Disposition
            </summary>
        </member>
        <member name="F:Library.Disposition.CENTER">
            <summary>
            Center (both)
            </summary>
        </member>
        <member name="F:Library.Disposition.LEFT_TOP">
            <summary>
            Left and corner
            </summary>
        </member>
        <member name="F:Library.Disposition.LEFT_MIDDLE">
            <summary>
            Left and middle height
            </summary>
        </member>
        <member name="F:Library.Disposition.LEFT_BOTTOM">
            <summary>
            Left and bottom height
            </summary>
        </member>
        <member name="F:Library.Disposition.CENTER_TOP">
            <summary>
            Center top
            </summary>
        </member>
        <member name="F:Library.Disposition.CENTER_BOTTOM">
            <summary>
            Center bottom
            </summary>
        </member>
        <member name="F:Library.Disposition.RIGHT_TOP">
            <summary>
            Right and top
            </summary>
        </member>
        <member name="F:Library.Disposition.RIGHT_MIDDLE">
            <summary>
            Right and middle
            </summary>
        </member>
        <member name="F:Library.Disposition.RIGHT_BOTTOM">
            <summary>
            Right and bottom
            </summary>
        </member>
        <member name="T:Library.EnumConstraint">
            <summary>
            Constraints
            </summary>
        </member>
        <member name="F:Library.EnumConstraint.AUTO">
            <summary>
            No contraints
            </summary>
        </member>
        <member name="F:Library.EnumConstraint.FIXED">
            <summary>
            a fixed numeric value
            </summary>
        </member>
        <member name="F:Library.EnumConstraint.RELATIVE">
            <summary>
            a relative percent value
            </summary>
        </member>
        <member name="F:Library.EnumConstraint.FORCED">
            <summary>
            force child box setted
            </summary>
        </member>
        <member name="T:Library.Events">
            <summary>
            Event list
            </summary>
        </member>
        <member name="F:Library.Events.notificationListName">
            <summary>
            Index name for notificationList
            </summary>
        </member>
        <member name="M:Library.Events.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Library.Events.Add(Library.INotify)">
            <summary>
            Add a new event
            </summary>
            <param name="n">event</param>
        </member>
        <member name="M:Library.Events.Remove(Library.INotify)">
            <summary>
            Remove un element
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Library.Events.ToHTMLString">
            <summary>
            To HTML String
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Library.Events.ToServerString">
            <summary>
            To server String
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Library.Events.ToString">
            <summary>
            Convert html events to string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Library.Events.Clone">
            <summary>
            Clone this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Library.Events.List">
            <summary>
            List of events
            </summary>
        </member>
        <member name="P:Library.Events.Count">
            <summary>
            Gets the count of this list events
            </summary>
        </member>
        <member name="P:Library.Events.Items">
            <summary>
            Gets the events
            </summary>
        </member>
        <member name="P:Library.Events.Item(System.String)">
            <summary>
            Gets or sets the event
            </summary>
            <param name="evName">event name</param>
            <returns></returns>
        </member>
        <member name="T:Library.ExtensionMethods">
            <summary>
            Set of extensions
            </summary>
        </member>
        <member name="M:Library.ExtensionMethods.CloneThis(System.String)">
            <summary>
            Clone a string
            </summary>
            <param name="toClone">string input</param>
            <returns>a new string with the same content than its input</returns>
        </member>
        <member name="M:Library.ExtensionMethods.CloneThis(Library.Rectangle)">
            <summary>
            Clone a rectangle
            </summary>
            <param name="r">rectangle source</param>
            <returns>a new rectangle with the same value that its input</returns>
        </member>
        <member name="M:Library.ExtensionMethods.CloneThis(Library.CSSColor)">
            <summary>
            Clone a color
            </summary>
            <param name="toClone">color source</param>
            <returns>a new color with the same value than the color source</returns>
        </member>
        <member name="M:Library.ExtensionMethods.CloneThis(System.Object)">
            <summary>
            Clone anything else
            </summary>
            <param name="d">object source</param>
            <returns>cloned object</returns>
        </member>
        <member name="T:Library.File">
            <summary>
            Defines an existing file into a project
            the source file resides into the project's build directory
            </summary>
        </member>
        <member name="F:Library.File.uniqueName">
            <summary>
            Index name for the unique id
            </summary>
        </member>
        <member name="F:Library.File.fileNameName">
            <summary>
            Index name for the file name
            </summary>
        </member>
        <member name="M:Library.File.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.File.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="f">file name</param>
        </member>
        <member name="P:Library.File.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.File.FileName">
            <summary>
            Gets the file name
            </summary>
        </member>
        <member name="T:Library.GeneratedSculpture">
            <summary>
            Generated sculpture to store into a project
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.uniqueName">
            <summary>
            Index name for the unique id
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.generationTypeName">
            <summary>
            Index name for generation type
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.nameName">
            <summary>
            Index name for generation type
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.secondObjectName">
            <summary>
            Index name for second object
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.destinationObjectName">
            <summary>
            Index name for destination object
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.refObjectListName">
            <summary>
            Index name for referenced objects
            </summary>
        </member>
        <member name="F:Library.GeneratedSculpture.emptyObjectListName">
            <summary>
            Index name for emptyied objects
            </summary>
        </member>
        <member name="M:Library.GeneratedSculpture.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name">name of this generating</param>
            <param name="generationType">type of generating</param>
        </member>
        <member name="M:Library.GeneratedSculpture.#ctor(Library.GeneratedSculpture)">
            <summary>
            Copy constructor
            </summary>
            <param name="gs">generated sculpture to copy</param>
        </member>
        <member name="M:Library.GeneratedSculpture.FillContainerObject(System.Collections.Generic.List{Library.HorizontalZone},System.Collections.Generic.List{Library.HTMLObject})">
            <summary>
            Fill container object
            </summary>
            <param name="list">list of horizontal zone to consider</param>
            <param name="outputList">list of HTMLObject obtained</param>
        </member>
        <member name="M:Library.GeneratedSculpture.GenerateContent(System.Collections.Generic.List{Library.AreaSizedRectangle},Library.Granne)">
            <summary>
            Generate content
            </summary>
            <param name="list">list of sized rectangle</param>
            <param name="g">granne to generate</param>
        </member>
        <member name="M:Library.GeneratedSculpture.GenerateContent(System.Collections.Generic.List{Library.AreaSizedRectangle})">
            <summary>
            Generate the content
            </summary>
            <param name="list">list of sized rectangle</param>
        </member>
        <member name="M:Library.GeneratedSculpture.CreateDestination(Library.Project,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create a destination object and store its into the project
            </summary>
            <param name="proj">project</param>
            <param name="width">width value</param>
            <param name="height">height value</param>
            <param name="h">horizontal count</param>
            <param name="v">vertical count</param>
        </member>
        <member name="M:Library.GeneratedSculpture.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.GeneratedSculpture.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.GeneratedSculpture.Type">
            <summary>
            Gets or sets the generation type
            </summary>
        </member>
        <member name="P:Library.GeneratedSculpture.Name">
            <summary>
            Gets or sets a name
            </summary>
        </member>
        <member name="P:Library.GeneratedSculpture.SecondObject">
            <summary>
            Second object
            </summary>
        </member>
        <member name="P:Library.GeneratedSculpture.Objects">
            <summary>
            Gets referenced objects
            </summary>
        </member>
        <member name="P:Library.GeneratedSculpture.RemainerModels">
            <summary>
            Gets remain models
            </summary>
        </member>
        <member name="P:Library.GeneratedSculpture.Destination">
            <summary>
            Gets or sets the destination object
            </summary>
        </member>
        <member name="T:Library.Granne">
            <summary>
            Granne : morceau dont la taille est modulo granneX et granneY
            </summary>
        </member>
        <member name="F:Library.Granne.granneRect">
            <summary>
            rectangle
            </summary>
        </member>
        <member name="F:Library.Granne.granneX">
            <summary>
            taille d'une case en nombre de pixels
            pour toutes les instances
            </summary>
        </member>
        <member name="F:Library.Granne.granneY">
            <summary>
            taille d'une case en nombre de pixels
            pour toutes les instances
            </summary>
        </member>
        <member name="F:Library.Granne.countCells">
            <summary>
            total de cases en x et y pour toutes les instances
            </summary>
        </member>
        <member name="F:Library.Granne.model">
            <summary>
            model
            </summary>
        </member>
        <member name="F:Library.Granne.indexX">
            <summary>
            numeros de case en x et en y (de 1 à N)
            </summary>
        </member>
        <member name="F:Library.Granne.indexY">
            <summary>
            numeros de case en x et en y (de 1 à N)
            </summary>
        </member>
        <member name="F:Library.Granne.sizeX">
            <summary>
            nombre de cases en x et en y
            </summary>
        </member>
        <member name="F:Library.Granne.sizeY">
            <summary>
            nombre de cases en x et en y
            </summary>
        </member>
        <member name="F:Library.Granne.shiftLeft">
            <summary>
            reste de la division entiere (en nombres positifs ou nuls)
            </summary>
        </member>
        <member name="F:Library.Granne.shiftRight">
            <summary>
            reste de la division entiere (en nombres positifs ou nuls)
            </summary>
        </member>
        <member name="F:Library.Granne.shiftTop">
            <summary>
            reste de la division entiere (en nombres positifs ou nuls)
            </summary>
        </member>
        <member name="F:Library.Granne.shiftBottom">
            <summary>
            reste de la division entiere (en nombres positifs ou nuls)
            </summary>
        </member>
        <member name="M:Library.Granne.#ctor(Library.CadreModel,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="c">cadre model appartenant à ce granne</param>
            <param name="left">left position in pixels</param>
            <param name="top">top position in pixels</param>
            <param name="width">width position in pixels</param>
            <param name="height">height position in pixels</param>
        </member>
        <member name="M:Library.Granne.#ctor(Library.Granne)">
            <summary>
            Copy Constructor
            </summary>
            <param name="g">granne source</param>
        </member>
        <member name="M:Library.Granne.InsertModel(System.Collections.Generic.List{Library.CadreModel})">
            <summary>
            Computes a list of cadre model
            </summary>
            <param name="modelList">list to host cadre model instances</param>
        </member>
        <member name="M:Library.Granne.InsertIntoArray(Library.Granne[0:,0:])">
            <summary>
            Insert a granne into a two-dimensional array
            </summary>
            <param name="tab">two-dimensional array of granne</param>
        </member>
        <member name="M:Library.Granne.CreateRefObject(Library.Project)">
            <summary>
            Create a RefObject that contains what is your construction
            for this granne
            </summary>
            <param name="proj">project to use</param>
            <returns>a RefObject class</returns>
        </member>
        <member name="M:Library.Granne.InsertVerticalZones(System.Collections.Generic.List{Library.VerticalZone},Library.RefObject)">
            <summary>
            Insert vertical areas
            </summary>
            <param name="vZones">vertical area list</param>
            <param name="content">content</param>
        </member>
        <member name="M:Library.Granne.InsertHorizontalZones(System.Collections.Generic.List{Library.HorizontalZone},Library.RefObject)">
            <summary>
            Insert horizontal areas
            </summary>
            <param name="hZones">horizontal area list</param>
            <param name="content">content</param>
        </member>
        <member name="M:Library.Granne.ConvertToDrawingRectangle">
            <summary>
            Convert granne to drawing rectangle
            </summary>
            <returns>sized rectangle</returns>
        </member>
        <member name="M:Library.Granne.Init">
            <summary>
            Initialize Granne sequence construction
            </summary>
        </member>
        <member name="M:Library.Granne.SetTrueRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the global true rectangle
            </summary>
            <param name="left">current granne left</param>
            <param name="top">current granne top</param>
            <param name="right">current granne right</param>
            <param name="bottom">current granne bottom</param>
        </member>
        <member name="M:Library.Granne.SetMinGranne(System.Int32,System.Int32)">
            <summary>
            Set the minimum size for all grannes
            </summary>
            <param name="minX">minimum size x</param>
            <param name="minY">minimum size y</param>
        </member>
        <member name="M:Library.Granne.ComputeGranne(System.Collections.Generic.List{Library.CadreModel})">
            <summary>
            Compute for all cadre model
            to select the minimum size cadre model
            </summary>
            <param name="list">list of cadre model</param>
        </member>
        <member name="M:Library.Granne.HorizontalComparer(Library.Granne,Library.Granne)">
            <summary>
            Compares two grannes by horizontal index
            return 1 if g1 >= g2 else -1
            </summary>
            <param name="g1">granne 1</param>
            <param name="g2">granne 2</param>
            <returns>1 or -1</returns>
        </member>
        <member name="M:Library.Granne.VerticalComparer(Library.Granne,Library.Granne)">
            <summary>
            Compares two grannes by vertical index
            return 1 if g1 >= g2 else -1
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Granne.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.Granne.TrueSize">
            <summary>
            Computes the true size
            </summary>
        </member>
        <member name="P:Library.Granne.Size">
            <summary>
            Gets the total size for all cadre model list
            </summary>
        </member>
        <member name="P:Library.Granne.TrueRectangle">
            <summary>
            Gets the true rectangle
            </summary>
        </member>
        <member name="P:Library.Granne.UnitySize">
            <summary>
            Gets the unity size
            </summary>
        </member>
        <member name="T:Library.HorizontalGranneComparer">
            <summary>
            Horizontal granne comparer
            </summary>
        </member>
        <member name="M:Library.HorizontalGranneComparer.Compare(Library.Granne,Library.Granne)">
            <summary>
            Compares two granne by horizontal index
            </summary>
            <param name="x">granne 1</param>
            <param name="y">granne 2</param>
            <returns>1 or -1</returns>
        </member>
        <member name="T:Library.VerticalGranneComparer">
            <summary>
            Vertical granne comparer
            </summary>
        </member>
        <member name="M:Library.VerticalGranneComparer.Compare(Library.Granne,Library.Granne)">
            <summary>
            Compares two granne by vertical index
            </summary>
            <param name="x">granne 1</param>
            <param name="y">granne 2</param>
            <returns>1 or -1</returns>
        </member>
        <member name="T:Library.Hexadecimal">
            <summary>
            Class implements Hexadecimal value
            </summary>
        </member>
        <member name="F:Library.Hexadecimal.code">
            <summary>
            code hexa
            </summary>
        </member>
        <member name="M:Library.Hexadecimal.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="input">input string in hexadecimal digits</param>
        </member>
        <member name="M:Library.Hexadecimal.#ctor(System.Int32)">
            <summary>
            Constructor with an int input value
            </summary>
            <param name="val">input value</param>
        </member>
        <member name="M:Library.Hexadecimal.HexadecimalDigitToChar(System.Int32)">
            <summary>
            Gets the hexadecimal digit of a value
            </summary>
            <param name="val">value from 0 to 15</param>
            <returns></returns>
        </member>
        <member name="M:Library.Hexadecimal.ToString(System.Int32)">
            <summary>
            Converts the int value into a string representation
            </summary>
            <param name="radix">maximum number of digits</param>
            <returns></returns>
        </member>
        <member name="M:Library.Hexadecimal.ToString(System.Int32,System.Int32)">
            <summary>
            Converts an int into an hexadecimal string
            with a radix as the maximum number of digits
            </summary>
            <param name="val">value</param>
            <param name="radix">maximum number of digits</param>
            <returns>hexadecimal value</returns>
        </member>
        <member name="M:Library.Hexadecimal.ToHexadecimalDigit(System.Char)">
            <summary>
            Converts an hexadecimal digit into an int value
            </summary>
            <param name="input">input hexadecimal char</param>
            <returns>int value</returns>
        </member>
        <member name="M:Library.Hexadecimal.ToHexadecimal(System.String)">
            <summary>
            Converts an hexadecimal string into an int
            </summary>
            <param name="input">input hexadecimal string</param>
            <returns>int</returns>
        </member>
        <member name="M:Library.Hexadecimal.TryParse(System.String,Library.Hexadecimal@)">
            <summary>
            Parse an hexadecimal input string and returns
            an object of hexadecimal class
            </summary>
            <param name="input">hexadecimal input</param>
            <param name="result">object of hexadecimal class</param>
            <returns>true if successfull parsing</returns>
        </member>
        <member name="P:Library.Hexadecimal.Value">
            <summary>
            Gets the int value
            </summary>
        </member>
        <member name="T:Library.HorizontalZone">
            <summary>
            An horizontal area that can contains multiple vertical areas
            </summary>
        </member>
        <member name="T:Library.IContainer">
            <summary>
            Interface for a container
            </summary>
        </member>
        <member name="M:Library.IContainer.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search the container where this container is
            </summary>
            <param name="containers">container list</param>
            <param name="objects">objects of content</param>
            <param name="searchName">container name to search</param>
            <param name="found">container result</param>
            <returns>true if a container has found</returns>
        </member>
        <member name="P:Library.IContainer.ConstraintWidth">
            <summary>
            Gets or sets the width constraint
            </summary>
        </member>
        <member name="P:Library.IContainer.ConstraintHeight">
            <summary>
            Gets or sets the height constraint
            </summary>
        </member>
        <member name="P:Library.IContainer.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.IContainer.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.IContainer.Name">
            <summary>
            Gets or sets the name of the container
            </summary>
        </member>
        <member name="T:Library.IGenerateDesignDIV">
            <summary>
            Interface for the generation of HTML DIV tag (design mode)
            </summary>
        </member>
        <member name="M:Library.IGenerateDesignDIV.GenerateDesignDIV">
            <summary>
            Generate table on design
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignDIV.GenerateDesignDIV(Library.Page)">
            <summary>
            Generate HTML DIV tag at design
            </summary>
            <param name="refPage">from a page</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignDIV.GenerateDesignDIV(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate HTML DIV tag at design
            </summary>
            <param name="refPage">from a page</param>
            <param name="objects">objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignDIV.GenerateDesignDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate HTML DIV tag at design
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignDIV.GenerateDesignDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate HTML DIV tag at design
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="objects">objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="T:Library.IGenerateDesignTable">
            <summary>
            Interface for the generation of table (design mode)
            </summary>
        </member>
        <member name="M:Library.IGenerateDesignTable.GenerateDesignTable(Library.Page)">
            <summary>
            Generate table at design
            </summary>
            <param name="refPage">from a page</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignTable.GenerateDesignTable(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate table at design
            </summary>
            <param name="refPage">from a page</param>
            <param name="objects">objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignTable.GenerateDesignTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate table at design
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesignTable.GenerateDesignTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate table at design
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="objects">objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="T:Library.IGenerateProductionDIV">
            <summary>
            Interface for the generation of HTML DIV tag (actual website)
            </summary>
        </member>
        <member name="M:Library.IGenerateProductionDIV.GenerateProductionDIV(Library.Page)">
            <summary>
            Generate HTML DIV tag at actual website
            </summary>
            <param name="refPage">from a page</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProductionDIV.GenerateProductionDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate HTML DIV tag at actual website
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProductionDIV.GenerateProductionDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate HTML DIV tag at actual website
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="objects">objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="T:Library.IGenerateProductionTable">
            <summary>
            Interface for the generation of table (actual website)
            </summary>
        </member>
        <member name="M:Library.IGenerateProductionTable.GenerateProductionTable(Library.Page)">
            <summary>
            Generate table at actual website
            </summary>
            <param name="refPage">from a page</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProductionTable.GenerateProductionTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate table at actual website
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProductionTable.GenerateProductionTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate table at actual website
            </summary>
            <param name="refPage">from a page</param>
            <param name="masterRefPage">from a master page</param>
            <param name="objects">objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="F:Library.HorizontalZone.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.countingLinesName">
            <summary>
            Index name for counting lines
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.automaticNameName">
            <summary>
            Index name for automatic name
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.automaticIdName">
            <summary>
            Index name for automatic id
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.verticalZoneName">
            <summary>
            Index name for vertical areas
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.javascriptName">
            <summary>
            Index name for javascript code
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.javascriptOnloadName">
            <summary>
            Index name for javascript onload code
            </summary>
        </member>
        <member name="F:Library.HorizontalZone.cssName">
            <summary>
            Index name for css styles
            </summary>
        </member>
        <member name="M:Library.HorizontalZone.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.HorizontalZone.#ctor(Library.HorizontalZone)">
            <summary>
            Copy Constructor
            </summary>
            <param name="hz">horizontal zone source</param>
        </member>
        <member name="M:Library.HorizontalZone.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search a container by name existing from all containers, all content
            and returns the result
            </summary>
            <param name="containers">all containers</param>
            <param name="objects">all contents</param>
            <param name="searchName">container to search</param>
            <param name="found">container result</param>
            <returns>true if the container has found</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignDIV">
            <summary>
            Generate an HTML DIV tag from null for design
            An horizontal area is hosted in a master page or a master object
            This function is not implemented nor called for this class
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master object exists in a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignDIV(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from null for design
            An horizontal area is hosted by an inner HTML tag table
            this inner HTML tag table must exist to work fine
            so, an horizontal area do not generate a direct DIV starting at a page
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from null for design
            An horizontal area is hosted by an inner HTML tag table
            this inner HTML tag table must exist to work fine
            so, an horizontal area do not generate a direct TABLE starting at a page
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignTable(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateDesignTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateProductionDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from null for actual website
            An horizontal area is hosted in a master page or a master object
            This function is not implemented nor called for this class
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateProductionDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master page generates the page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateProductionDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateProductionTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from null for actual website
            An horizontal area is hosted in a master page or a master object
            This function is not implemented nor called for this class
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateProductionTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.GenerateProductionTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HorizontalZone.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.HorizontalZone.ConstraintWidth">
            <summary>
            Gets or sets width constraint
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.ConstraintHeight">
            <summary>
            Gets or sets height constraint
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.HtmlWidth">
            <summary>
            Gets inner box width
            empty padding css left and right
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.HtmlHeight">
            <summary>
            Gets inner box height
            empty padding css top and bottom
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.CountLines">
            <summary>
            Gets or sets the counting lines
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.VerticalZones">
            <summary>
            Gets vertical areas
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.TotalCountColumns">
            <summary>
            Gets the total count columns
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.Id">
            <summary>
            Gets or sets the automatic id
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.Name">
            <summary>
            Gets or sets the automatic name
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.JavaScript">
            <summary>
            Gets or sets the javascript code
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.JavaScriptOnLoad">
            <summary>
            Gets or sets the javascript on load
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.JavaScriptOnLoadSource">
            <summary>
            Gets or sets the javascript on load source code
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.JavaScriptSource">
            <summary>
            Gets or sets the javascript source code
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.CSS">
            <summary>
            Gets or sets CSS
            </summary>
        </member>
        <member name="P:Library.HorizontalZone.Stringified">
            <summary>
            Gets the stringified horizontal area
            </summary>
        </member>
        <member name="T:Library.HTMLEvent">
            <summary>
            HTML Event relation
            </summary>
        </member>
        <member name="T:Library.INotify">
            <summary>
            Interface for notification
            </summary>
        </member>
        <member name="M:Library.INotify.Catch(System.Object,System.EventArgs)">
            <summary>
            Handle event
            </summary>
            <param name="sender">source</param>
            <param name="e">arguments</param>
            <returns>code to insert</returns>
        </member>
        <member name="P:Library.INotify.NotificationName">
            <summary>
            Notification name
            </summary>
        </member>
        <member name="P:Library.INotify.IsServerSide">
            <summary>
            True if server side event
            </summary>
        </member>
        <member name="P:Library.INotify.Raise">
            <summary>
            Raise event
            </summary>
        </member>
        <member name="F:Library.HTMLEvent.eventNameName">
            <summary>
            Id for Event name
            </summary>
        </member>
        <member name="F:Library.HTMLEvent.funcImpl">
            <summary>
            raise list
            </summary>
        </member>
        <member name="M:Library.HTMLEvent.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="eventName">event name</param>
        </member>
        <member name="M:Library.HTMLEvent.Catch(System.Object,System.EventArgs)">
            <summary>
            Catch events
            </summary>
            <param name="sender">sender</param>
            <param name="e">args</param>
            <returns>code</returns>
        </member>
        <member name="M:Library.HTMLEvent.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.HTMLEvent.IsServerSide">
            <summary>
            Gets if this event is server side
            </summary>
        </member>
        <member name="P:Library.HTMLEvent.NotificationName">
            <summary>
            Gets or sets the notification name
            </summary>
        </member>
        <member name="P:Library.HTMLEvent.Raise">
            <summary>
            Gets the list of actions
            </summary>
        </member>
        <member name="T:Library.HTMLObject">
            <summary>
            An HTML Object is an instance of an existing tool or a master object
            Despite a master object is a design for an html complex content,
            the HTML Object is the instance of a master object and its sub-contents are unique
            If HTML Object is a tool, it means that the HTML tool source is no more linked with.
            Any changes in a tool after creating an instance of a tool are not propagated
            </summary>
        </member>
        <member name="T:Library.IContent">
            <summary>
            Element of a project that acts as a content
            </summary>
        </member>
        <member name="M:Library.IContent.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search the container where this content resides
            </summary>
            <param name="containers">container list</param>
            <param name="objects">objects of content</param>
            <param name="searchName">container name to search</param>
            <param name="found">container result</param>
            <returns>true if a container has found</returns>
        </member>
        <member name="P:Library.IContent.Container">
            <summary>
            Gets or sets the container name
            </summary>
        </member>
        <member name="T:Library.IGenerateDesign">
            <summary>
            Interface for the generation of page (design mode)
            </summary>
        </member>
        <member name="M:Library.IGenerateDesign.GenerateThumbnail">
            <summary>
            Generate a thumbnail
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesign.GenerateDesign">
            <summary>
            Generate the top-level design
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesign.GenerateDesign(Library.Page)">
            <summary>
            Generate the next level (from a page) design
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesign.GenerateDesign(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate the third level (from a page or a master page)
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesign.GenerateDesign(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate objects owned by a page
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">objects owned</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateDesign.GenerateDesign(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate objects owned by a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">objects owned</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="T:Library.IGenerateProduction">
            <summary>
            Interface for the generation of page (design mode)
            </summary>
        </member>
        <member name="M:Library.IGenerateProduction.GenerateProduction">
            <summary>
            Generate the top-level design
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProduction.GenerateProduction(Library.Page)">
            <summary>
            Generate the next level (from a page) at actual website
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProduction.GenerateProduction(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate the third level (from a page or a master page) at actual website
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.IGenerateProduction.GenerateProduction(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate objects owned by a page or a master page at actual website
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">objects owned</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="F:Library.HTMLObject.uniqueName">
            <summary>
            Index name for unique id
            </summary>
        </member>
        <member name="F:Library.HTMLObject.belongsToName">
            <summary>
            Index name to handle the object name at which it belongs to
            </summary>
        </member>
        <member name="F:Library.HTMLObject.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.HTMLObject.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.HTMLObject.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.HTMLObject.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.HTMLObject.masterObjectName">
            <summary>
            Index name to handle the master object of what this html object inherits
            </summary>
        </member>
        <member name="F:Library.HTMLObject.toolName">
            <summary>
            Index name to handle the tool of what this html object inherits
            </summary>
        </member>
        <member name="F:Library.HTMLObject.containerName">
            <summary>
            Index name to handle the container name where this html object resides
            </summary>
        </member>
        <member name="F:Library.HTMLObject.titleName">
            <summary>
            Index name for title
            </summary>
        </member>
        <member name="F:Library.HTMLObject.automaticNameName">
            <summary>
            Index name for automatic name
            </summary>
        </member>
        <member name="F:Library.HTMLObject.automaticIdName">
            <summary>
            Index name for automatic id
            </summary>
        </member>
        <member name="F:Library.HTMLObject.HTMLContentName">
            <summary>
            Index name for HTML content
            </summary>
        </member>
        <member name="F:Library.HTMLObject.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="F:Library.HTMLObject.javascriptName">
            <summary>
            Index name for javascript code
            </summary>
        </member>
        <member name="F:Library.HTMLObject.javascriptOnloadName">
            <summary>
            Index name for javascript on load code
            </summary>
        </member>
        <member name="F:Library.HTMLObject.cssName">
            <summary>
            Index name for css
            </summary>
        </member>
        <member name="F:Library.HTMLObject.additionalCssName">
            <summary>
            Index name for additional css
            </summary>
        </member>
        <member name="M:Library.HTMLObject.#ctor(Library.HTMLTool)">
            <summary>
            Default constructor
            Create an HTML object that hosts an instance of a tool
            </summary>
            <param name="htmlTool">HTML Tool import</param>
        </member>
        <member name="M:Library.HTMLObject.#ctor(Library.MasterObject)">
            <summary>
            Constructor for a master object
            </summary>
            <param name="masterObject">master object to use</param>
        </member>
        <member name="M:Library.HTMLObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.HTMLObject.#ctor(Library.HTMLObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="obj">object to copy</param>
        </member>
        <member name="M:Library.HTMLObject.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search container
            </summary>
            <param name="containers">container list</param>
            <param name="objects">object content list</param>
            <param name="searchName">container name to search</param>
            <param name="found">container result</param>
            <returns>true if a container has found</returns>
        </member>
        <member name="M:Library.HTMLObject.ImportCSS(Library.CodeCSS)">
            <summary>
            Import a css object
            </summary>
            <param name="css">css code </param>
        </member>
        <member name="M:Library.HTMLObject.CSSOutput(System.Boolean)">
            <summary>
            Obtain the CSS output
            given a switch to resolve configuration key
            </summary>
            <param name="resolveConfig">true if replace configuration key by its value</param>
            <returns>css output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateDesign">
            <summary>
            Generate design from nothing
            Function to design this object
            a master object or a tool
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateDesign(Library.Page)">
            <summary>
            Generate design from a page reference
            No html object is directly inherited from a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateDesign(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate design from a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateDesign(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design from a page and its objects
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateDesign(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design from a page or a master page with their objects
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateThumbnail">
            <summary>
            Generate a thumbnail
            This function should be implemented
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateProduction">
            <summary>
            Generate actual website from nothing
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateProduction(Library.Page)">
            <summary>
            Generate design from a page reference
            No html object is directly inherited from a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateProduction(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate actual website from a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.GenerateProduction(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate actual website from a page and its objects
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLObject.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.HTMLObject.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.HTMLObject.IsMasterObject">
            <summary>
            Says if it is a master object
            </summary>
        </member>
        <member name="P:Library.HTMLObject.IsToolObject">
            <summary>
            Says if it is a tool object
            </summary>
        </member>
        <member name="P:Library.HTMLObject.BelongsTo">
            <summary>
            Gets or sets the parent
            </summary>
        </member>
        <member name="P:Library.HTMLObject.ConstraintWidth">
            <summary>
            Gets or sets the width constraint 
            </summary>
        </member>
        <member name="P:Library.HTMLObject.ConstraintHeight">
            <summary>
            Gets or sets height constraint
            </summary>
        </member>
        <member name="P:Library.HTMLObject.MasterObjectName">
            <summary>
            Gets the master object name
            </summary>
        </member>
        <member name="P:Library.HTMLObject.ToolFullPath">
            <summary>
            Gets the full path of tool
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.HTMLObject.HtmlWidth">
            <summary>
            Gets inner box width
            empty padding css left and right
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.HTMLObject.HtmlHeight">
            <summary>
            Gets inner box height
            empty padding css top and bottom
            </summary>
        </member>
        <member name="P:Library.HTMLObject.SizeString">
            <summary>
            Gets the size string for dumping mode
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Container">
            <summary>
            Gets or sets the container
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Title">
            <summary>
            Gets or sets the title of this master object
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Id">
            <summary>
            Gets or sets the automatic id
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Name">
            <summary>
            Gets or sets the automatic name
            </summary>
        </member>
        <member name="P:Library.HTMLObject.HTML">
            <summary>
            Gets or sets the HTML content
            </summary>
        </member>
        <member name="P:Library.HTMLObject.GeneratedHTML">
            <summary>
            Gets the final HTML content after translation of any configuration key
            </summary>
        </member>
        <member name="P:Library.HTMLObject.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="P:Library.HTMLObject.JavaScript">
            <summary>
            Gets the JavaScript code
            </summary>
        </member>
        <member name="P:Library.HTMLObject.JavaScriptSource">
            <summary>
            Gets or sets the JavaScript source code
            </summary>
        </member>
        <member name="P:Library.HTMLObject.JavaScriptOnLoad">
            <summary>
            Gets or sets the javascript on load
            </summary>
        </member>
        <member name="P:Library.HTMLObject.JavaScriptOnLoadSource">
            <summary>
            Gets or sets the javascript on load source code
            </summary>
        </member>
        <member name="P:Library.HTMLObject.CSS">
            <summary>
            Gets or sets CSS
            </summary>
        </member>
        <member name="P:Library.HTMLObject.CSSAdditional">
            <summary>
            Gets the CSS additional list
            </summary>
        </member>
        <member name="T:Library.HTMLTool">
            <summary>
            HTML tool : a tool is simply a host for any HTML code
            </summary>
        </member>
        <member name="T:Library.IProjectElement">
            <summary>
            Interface of an element project
            </summary>
        </member>
        <member name="P:Library.IProjectElement.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.IProjectElement.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="F:Library.HTMLTool.uniqueName">
            <summary>
            Index name for unique id
            </summary>
        </member>
        <member name="F:Library.HTMLTool.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.HTMLTool.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.HTMLTool.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.HTMLTool.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.HTMLTool.pathName">
            <summary>
            Index name for path
            </summary>
        </member>
        <member name="F:Library.HTMLTool.titleName">
            <summary>
            Index name for title
            </summary>
        </member>
        <member name="F:Library.HTMLTool.automaticNameName">
            <summary>
            Index name for automatic name
            </summary>
        </member>
        <member name="F:Library.HTMLTool.automaticIdName">
            <summary>
            Index name for automatic id
            </summary>
        </member>
        <member name="F:Library.HTMLTool.HTMLContentName">
            <summary>
            Index name for HTML content
            </summary>
        </member>
        <member name="F:Library.HTMLTool.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="F:Library.HTMLTool.javascriptName">
            <summary>
            Index name for javascript code
            </summary>
        </member>
        <member name="F:Library.HTMLTool.javascriptOnloadName">
            <summary>
            Index name for javascript on load code
            </summary>
        </member>
        <member name="F:Library.HTMLTool.cssName">
            <summary>
            Index name for css
            </summary>
        </member>
        <member name="F:Library.HTMLTool.additionalCssName">
            <summary>
            Index name for additional css
            </summary>
        </member>
        <member name="M:Library.HTMLTool.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.HTMLTool.ImportCSS(Library.CodeCSS)">
            <summary>
            Import a CSS
            </summary>
            <param name="css">css code</param>
        </member>
        <member name="M:Library.HTMLTool.CSSOutput(System.Boolean)">
            <summary>
            Obtain the CSS output
            given a switch to resolve configuration key
            </summary>
            <param name="resolveConfig">true if replace configuration key by its value</param>
            <returns>css output</returns>
        </member>
        <member name="M:Library.HTMLTool.GenerateDesign">
            <summary>
            Generate design from nothing
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLTool.GenerateDesign(Library.Page)">
            <summary>
            Generate design from a page reference
            No tool is directly inherited from a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLTool.GenerateDesign(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate design from a page or a master page
            No tool is directly inherited from a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLTool.GenerateDesign(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design from a page or a master page
            No tool is directly inherited from a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLTool.GenerateDesign(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design from a page or a master page
            No tool is directly inherited from a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLTool.GenerateThumbnail">
            <summary>
            Generate a thumbnail
            This function should be implemented
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.HTMLTool.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.HTMLTool.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.HTMLTool.ConstraintWidth">
            <summary>
            Gets or sets the width constraint 
            </summary>
        </member>
        <member name="P:Library.HTMLTool.ConstraintHeight">
            <summary>
            Gets or sets height constraint
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.HTMLTool.HtmlWidth">
            <summary>
            Gets inner box width
            empty padding css left and right
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.HTMLTool.HtmlHeight">
            <summary>
            Gets inner box height
            empty padding css top and bottom
            </summary>
        </member>
        <member name="P:Library.HTMLTool.SizeString">
            <summary>
            Gets the size string for dumping mode
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Title">
            <summary>
            Gets or sets the title of this master object
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Id">
            <summary>
            Gets or sets the automatic id
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Name">
            <summary>
            Gets or sets the automatic name
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Path">
            <summary>
            Gets or sets the path where this tool is placed
            </summary>
        </member>
        <member name="P:Library.HTMLTool.HTML">
            <summary>
            Gets or sets the HTML content
            </summary>
        </member>
        <member name="P:Library.HTMLTool.GeneratedHTML">
            <summary>
            Gets the final HTML content after translation of any configuration key
            </summary>
        </member>
        <member name="P:Library.HTMLTool.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="P:Library.HTMLTool.JavaScript">
            <summary>
            Gets the JavaScript code
            </summary>
        </member>
        <member name="P:Library.HTMLTool.JavaScriptSource">
            <summary>
            Gets or sets the JavaScript source code
            </summary>
        </member>
        <member name="P:Library.HTMLTool.JavaScriptOnLoad">
            <summary>
            Gets or sets the javascript on load
            </summary>
        </member>
        <member name="P:Library.HTMLTool.JavaScriptOnLoadSource">
            <summary>
            Gets or sets the javascript on load source code
            </summary>
        </member>
        <member name="P:Library.HTMLTool.CSS">
            <summary>
            Gets or sets CSS
            </summary>
        </member>
        <member name="P:Library.HTMLTool.CSSAdditional">
            <summary>
            Gets the CSS additional list
            </summary>
        </member>
        <member name="P:Library.HTMLTool.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.HTMLTool.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="T:Library.ImportType">
            <summary>
            Import type
            </summary>
        </member>
        <member name="F:Library.ImportType.FILES">
            <summary>
            Import files
            </summary>
        </member>
        <member name="F:Library.ImportType.TOOLS">
            <summary>
            Import tools
            </summary>
        </member>
        <member name="F:Library.ImportType.MASTERPAGES">
            <summary>
            Import master pages
            </summary>
        </member>
        <member name="F:Library.ImportType.MASTEROBJECTS">
            <summary>
            Import master objects
            </summary>
        </member>
        <member name="F:Library.ImportType.SCULPTURES">
            <summary>
            Import sculptures
            </summary>
        </member>
        <member name="T:Library.MasterObject">
            <summary>
            A master object hosts a template for an object that can be instanciate
            to set a container with one instance of this
            </summary>
        </member>
        <member name="F:Library.MasterObject.uniqueName">
            <summary>
            Index name for unique id
            </summary>
        </member>
        <member name="F:Library.MasterObject.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.MasterObject.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.MasterObject.automaticNameName">
            <summary>
            Index name for automatic name
            </summary>
        </member>
        <member name="F:Library.MasterObject.automaticIdName">
            <summary>
            Index name for automatic id
            </summary>
        </member>
        <member name="F:Library.MasterObject.titleName">
            <summary>
            Index name for title
            </summary>
        </member>
        <member name="F:Library.MasterObject.countingLinesName">
            <summary>
            Index name for counting lines
            </summary>
        </member>
        <member name="F:Library.MasterObject.countingColumnsName">
            <summary>
            Index name for counting column
            </summary>
        </member>
        <member name="F:Library.MasterObject.containerName">
            <summary>
            Index name for container name
            </summary>
        </member>
        <member name="F:Library.MasterObject.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.MasterObject.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.MasterObject.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="F:Library.MasterObject.javascriptName">
            <summary>
            Index name for javascript code
            </summary>
        </member>
        <member name="F:Library.MasterObject.javascriptOnloadName">
            <summary>
            Index name for javascript onload code
            </summary>
        </member>
        <member name="F:Library.MasterObject.cssName">
            <summary>
            Index name for css styles
            </summary>
        </member>
        <member name="F:Library.MasterObject.htmlHeaderName">
            <summary>
            Index name for the html header
            </summary>
        </member>
        <member name="F:Library.MasterObject.htmlFooterName">
            <summary>
            Index name for the html footer
            </summary>
        </member>
        <member name="F:Library.MasterObject.objectListName">
            <summary>
            Index name for its own objects
            </summary>
        </member>
        <member name="F:Library.MasterObject.horizontalZoneName">
            <summary>
            Index name for horizontal areas
            </summary>
        </member>
        <member name="M:Library.MasterObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.MasterObject.#ctor(Library.MasterObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="refObj">object source</param>
        </member>
        <member name="M:Library.MasterObject.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search a container by name existing from all containers, all content
            and returns the result
            </summary>
            <param name="containers">all containers</param>
            <param name="objects">all contents</param>
            <param name="searchName">container to search</param>
            <param name="found">container result</param>
            <returns>true if the container has found</returns>
        </member>
        <member name="M:Library.MasterObject.MakeZones(System.Collections.Generic.List{Library.AreaSizedRectangle})">
            <summary>
            Construct all zones and compute total size
            </summary>
            <param name="list">list of rectangle the user supplied</param>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignDIV">
            <summary>
            Generate an HTML DIV tag from null for design
            A master object is hosted in a page
            This function is not implemented nor called
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from a page for design
            This function is used because the design for
            the master object converted in html is visible into
            the dialog box of a master object
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master object exists in a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignDIV(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from a page for design
            This function is used because the design for
            the master object converted in html is visible into
            the dialog box of a master object
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignTable(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesignTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesign">
            <summary>
            Génération du master object sans la page (design)
            This is a special case for a master object
            A master object can be viewed at design mode.
            </summary>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesign(Library.Page)">
            <summary>
            A master object is not obtained from a single page
            but inner page, master page and inner master object
            This function is then not implemented nor called
            </summary>
            <param name="refPage">page à afficher</param>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesign(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate design of a master object
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesign(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design of a master object that is declared in a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list of master object</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateDesign(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design of a master object that is declared in a page
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">object list of master object</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateThumbnail">
            <summary>
            A master object doesn't have a thumbnail visual
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProduction">
            <summary>
            Génération du master object sans la page (actual website)
            A master object is not solely called
            </summary>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProduction(Library.Page)">
            <summary>
            A master object is not obtained from a single page
            but inner page, master page and inner master object
            This function is then not implemented nor called
            </summary>
            <param name="refPage">page à afficher</param>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProduction(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate actual website of a master object
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProduction(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate actual website of a master object that is declared in a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list of master object</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProductionDIV(Library.Page)">
            <summary>
            A master object is indirectly a child of the page
            This function is not implemented nor called
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProductionDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master object exists in a page or a master page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProductionDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProductionTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from a page for actual website
            This function is not used for actual website but in design only
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProductionTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.GenerateProductionTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterObject.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.MasterObject.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.MasterObject.RelativeWidth">
            <summary>
            Test if width constraint is relative
            Or set the constraint to relative
            </summary>
        </member>
        <member name="P:Library.MasterObject.RelativeHeight">
            <summary>
            Test if height constraint is relative
            Or set the constraint to relative
            </summary>
        </member>
        <member name="P:Library.MasterObject.ConstraintWidth">
            <summary>
            Gets or sets width constraint
            </summary>
        </member>
        <member name="P:Library.MasterObject.ConstraintHeight">
            <summary>
            Gets or sets height constraint
            </summary>
        </member>
        <member name="P:Library.MasterObject.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.MasterObject.HtmlWidth">
            <summary>
            Gets inner box width
            empty padding css left and right
            </summary>
        </member>
        <member name="P:Library.MasterObject.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.MasterObject.HtmlHeight">
            <summary>
            Gets inner box height
            empty padding css top and bottom
            </summary>
        </member>
        <member name="P:Library.MasterObject.CountLines">
            <summary>
            Gets or sets the counting lines
            </summary>
        </member>
        <member name="P:Library.MasterObject.CountColumns">
            <summary>
            Gets or sets the counting columns
            </summary>
        </member>
        <member name="P:Library.MasterObject.SizeString">
            <summary>
            Gets the size string for dumping mode
            </summary>
        </member>
        <member name="P:Library.MasterObject.GridSizeString">
            <summary>
            Gets the grid size for dumping mode
            </summary>
        </member>
        <member name="P:Library.MasterObject.Container">
            <summary>
            Gets or sets the container name
            </summary>
        </member>
        <member name="P:Library.MasterObject.Title">
            <summary>
            Gets or sets the title of this master object
            </summary>
        </member>
        <member name="P:Library.MasterObject.Id">
            <summary>
            Gets or sets the automatic id
            </summary>
        </member>
        <member name="P:Library.MasterObject.Name">
            <summary>
            Gets or sets the automatic name
            </summary>
        </member>
        <member name="P:Library.MasterObject.Objects">
            <summary>
            Gets its own objects
            </summary>
        </member>
        <member name="P:Library.MasterObject.HorizontalZones">
            <summary>
            Gets the horizontal areas
            </summary>
        </member>
        <member name="P:Library.MasterObject.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="P:Library.MasterObject.JavaScript">
            <summary>
            Gets or sets the javascript code
            </summary>
        </member>
        <member name="P:Library.MasterObject.JavaScriptOnLoad">
            <summary>
            Gets or sets the javascript on load
            </summary>
        </member>
        <member name="P:Library.MasterObject.JavaScriptOnLoadSource">
            <summary>
            Gets or sets the javascript on load source code
            </summary>
        </member>
        <member name="P:Library.MasterObject.JavaScriptSource">
            <summary>
            Gets or sets the javascript source code
            </summary>
        </member>
        <member name="P:Library.MasterObject.CSS">
            <summary>
            Gets or sets CSS
            </summary>
        </member>
        <member name="P:Library.MasterObject.HTMLBefore">
            <summary>
            Gets or sets a plain text html header
            </summary>
        </member>
        <member name="P:Library.MasterObject.HTMLAfter">
            <summary>
            Gets or sets a plain text html footer
            </summary>
        </member>
        <member name="P:Library.MasterObject.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.MasterObject.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="T:Library.MasterPage">
            <summary>
            A master page is a template that acts as the first content generator
            all objects of master page and all specific objects for a single page are mixed
            object name are dissocied by a prefix name to correspond distinguished as page or master page behave
            </summary>
        </member>
        <member name="F:Library.MasterPage.uniqueName">
            <summary>
            Index name for unique id
            </summary>
        </member>
        <member name="F:Library.MasterPage.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.MasterPage.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.MasterPage.cssOnFileName">
            <summary>
            Index name for css on file or css inline switch
            </summary>
        </member>
        <member name="F:Library.MasterPage.cssFilenameName">
            <summary>
            Index name for css file name
            </summary>
        </member>
        <member name="F:Library.MasterPage.javascriptOnFileName">
            <summary>
            Index name for javascript on file or javascript inline switch
            </summary>
        </member>
        <member name="F:Library.MasterPage.javascriptFilenameName">
            <summary>
            Index name for javascript file name
            </summary>
        </member>
        <member name="F:Library.MasterPage.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.MasterPage.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.MasterPage.countingLinesName">
            <summary>
            Index name for counting lines
            </summary>
        </member>
        <member name="F:Library.MasterPage.countingColumnsName">
            <summary>
            Index name for counting columns
            </summary>
        </member>
        <member name="F:Library.MasterPage.nameName">
            <summary>
            Index name for name
            </summary>
        </member>
        <member name="F:Library.MasterPage.objectListName">
            <summary>
            Index name for its own objects
            </summary>
        </member>
        <member name="F:Library.MasterPage.horizontalZoneListName">
            <summary>
            Index name for horizontal areas
            </summary>
        </member>
        <member name="F:Library.MasterPage.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="F:Library.MasterPage.javascriptName">
            <summary>
            Index name for javascript code
            </summary>
        </member>
        <member name="F:Library.MasterPage.javascriptOnloadName">
            <summary>
            Index name for javascript on load code
            </summary>
        </member>
        <member name="F:Library.MasterPage.cssName">
            <summary>
            Index name for css
            </summary>
        </member>
        <member name="F:Library.MasterPage.metaName">
            <summary>
            Index name for meta keywords
            </summary>
        </member>
        <member name="M:Library.MasterPage.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.MasterPage.#ctor(Library.MasterPage)">
            <summary>
            Copy constructor
            </summary>
            <param name="refObj">master page to copy from</param>
        </member>
        <member name="M:Library.MasterPage.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search a container by name existing from all containers, all content
            and returns the result
            </summary>
            <param name="containers">all containers</param>
            <param name="objects">all contents</param>
            <param name="searchName">container to search</param>
            <param name="found">container result</param>
            <returns>true if the container has found</returns>
        </member>
        <member name="M:Library.MasterPage.MakeZones(System.Collections.Generic.List{Library.AreaSizedRectangle})">
            <summary>
            Construct all zones and compute total size
            </summary>
            <param name="list">list of rectangle the user supplied</param>
        </member>
        <member name="M:Library.MasterPage.MakeZones(System.UInt32,System.UInt32,System.Collections.Generic.List{Library.AreaSizedRectangle},System.Collections.Generic.List{Library.HorizontalZone})">
            <summary>
            Construct all zones and compute total size
            </summary>
            <param name="c">column count</param>
            <param name="l">list count</param>
            <param name="list">list of rectangle the user supplied</param>
            <param name="hList">horizontal zones list</param>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignDIV">
            <summary>
            Generate an HTML DIV tag from null for design
            A master page is hosted in a page
            This function is not implemented nor called
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from a page for design
            A master page is set for a page
            so, a master page is designed to generate a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignDIV(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master page generates the page
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master page generates the page
            restricted objects in page are computed equally
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from a page for design
            A master page is set for a page
            so, a master page is designed to generate a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesign">
            <summary>
            Génération de la master page sans la page (design)
            This is a special case for a master page
            A master page can be viewed at design mode.
            So, you create a fake page to handle a master page
            </summary>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesign(Library.Page)">
            <summary>
            Mode design de la page
            </summary>
            <param name="refPage">page à afficher</param>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesign(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate design of a page that you were supplied and its master page
            The master page object doesn't use any other master page, so this function is not implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesign(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design of a page that you were supplied and its master page
            The master page object doesn't use any other master page, so this function is not implemented
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesign(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate design of a page that you were supplied
            restricted objects in page are computed equally
            This function is not implemented nor called
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignDIV(Library.Page,Library.MasterObject,Library.ParentConstraint)">
            <summary>
            Generate HTML DIV tag on design of a page that you were supplied and its master page
            The master page object doesn't use any other master page, so this function is not implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="refMasterObject">master object reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesignTable(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate HTML TABLE tag on design of a page that you were supplied and its master page
            The master page object doesn't play with objects themselves, so this function is not implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateDesign(Library.Page,Library.MasterObject,Library.ParentConstraint)">
            <summary>
            Generate design of a page that you were supplied and its master page
            The master page object doesn't use any other master page, so this function is not implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="refMasterObject">master object reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateThumbnail">
            <summary>
            A master page has a thumbnail visual
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProduction">
            <summary>
            Génération de la master page sans la page on actual website
            A master page can be viewed herself on actual website.
            So, the function is not implemented nor called
            </summary>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProduction(Library.Page)">
            <summary>
            Mode production de la page
            </summary>
            <param name="refPage">page à afficher</param>
            <returns>page html</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProduction(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate actual website of a page that you were supplied and its master page
            The master page object doesn't use any other master page, so this function is not implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProduction(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate actual website of a page that you were supplied and its master page
            The master page object doesn't use any other master page, so this function is not implemented
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProductionDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from a page for actual website
            A master page is set for a page
            so, a master page is designed to generate a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProductionDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master page generates the page
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProductionDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master page generates the page
            restricted objects in page are computed equally
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProductionTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from a page for actual website
            A master page is set for a page
            so, a master page is designed to generate a page
            </summary>
            <param name="refPage">page reference</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProductionTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.GenerateProductionTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            The master page hosts the complete page, so this function is never implemented
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.MasterPage.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.MasterPage.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.MasterPage.ConstraintWidth">
            <summary>
            Gets or sets width constraint
            </summary>
        </member>
        <member name="P:Library.MasterPage.ConstraintHeight">
            <summary>
            Gets or sets height constraint
            </summary>
        </member>
        <member name="P:Library.MasterPage.IsCSSOnFile">
            <summary>
            Gets or sets if the css is exported to a file
            </summary>
        </member>
        <member name="P:Library.MasterPage.CSSFileName">
            <summary>
            Gets ot sets the file name where the css code resides
            </summary>
        </member>
        <member name="P:Library.MasterPage.IsJavaScriptOnFile">
            <summary>
            Gets or sets if javascript is exported to a file
            </summary>
        </member>
        <member name="P:Library.MasterPage.JavaScriptFileName">
            <summary>
            Gets or sets the file name where the javascript code resides
            </summary>
        </member>
        <member name="P:Library.MasterPage.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.MasterPage.HtmlWidth">
            <summary>
            Gets inner box width
            empty padding css left and right
            </summary>
        </member>
        <member name="P:Library.MasterPage.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.MasterPage.HtmlHeight">
            <summary>
            Gets inner box height
            empty padding css top and bottom
            </summary>
        </member>
        <member name="P:Library.MasterPage.SizeString">
            <summary>
            Gets the size string for dumping mode
            </summary>
        </member>
        <member name="P:Library.MasterPage.GridSizeString">
            <summary>
            Gets the grid size for dumping mode
            </summary>
        </member>
        <member name="P:Library.MasterPage.CountLines">
            <summary>
            Gets or sets the counting lines
            </summary>
        </member>
        <member name="P:Library.MasterPage.CountColumns">
            <summary>
            Gets or sets the counting columns
            </summary>
        </member>
        <member name="P:Library.MasterPage.Name">
            <summary>
            Gets or sets the name of this master page
            </summary>
        </member>
        <member name="P:Library.MasterPage.Objects">
            <summary>
            Gets own objects
            </summary>
        </member>
        <member name="P:Library.MasterPage.HorizontalZones">
            <summary>
            Gets horizontal areas
            </summary>
        </member>
        <member name="P:Library.MasterPage.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="P:Library.MasterPage.JavaScript">
            <summary>
            Gets the javascript code
            </summary>
        </member>
        <member name="P:Library.MasterPage.JavaScriptOnLoad">
            <summary>
            Gets the javascript on load code
            </summary>
        </member>
        <member name="P:Library.MasterPage.JavaScriptOnLoadSource">
            <summary>
            Gets or sets the javascript on load source code
            </summary>
        </member>
        <member name="P:Library.MasterPage.JavaScriptSource">
            <summary>
            Gets the javascript source code
            </summary>
        </member>
        <member name="P:Library.MasterPage.CSS">
            <summary>
            Gets the css code
            </summary>
        </member>
        <member name="P:Library.MasterPage.Meta">
            <summary>
            Gets or sets the meta keywords string
            </summary>
        </member>
        <member name="P:Library.MasterPage.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.MasterPage.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="T:Library.OutputHTML">
            <summary>
            Output html source
            </summary>
        </member>
        <member name="M:Library.OutputHTML.AppendCSS(System.Collections.Generic.List{Library.CodeCSS})">
            <summary>
            Append additional CSS
            multiple CSS-style properties are overriden
            each last CSS-style property is prioritized for all objects
            </summary>
            <param name="cssAdditional">css to add</param>
        </member>
        <member name="P:Library.OutputHTML.HTML">
            <summary>
            Gets the HTML builder
            </summary>
        </member>
        <member name="P:Library.OutputHTML.CSS">
            <summary>
            Gets the CSS builder
            </summary>
        </member>
        <member name="P:Library.OutputHTML.JavaScript">
            <summary>
            Gets the JavaScript builder
            </summary>
        </member>
        <member name="P:Library.OutputHTML.JavaScriptOnLoad">
            <summary>
            Gets the JavaScript On Load builder
            </summary>
        </member>
        <member name="T:Library.Page">
            <summary>
            A page is a complete HTML Page (it generates a complete file)
            </summary>
        </member>
        <member name="F:Library.Page.uniqueName">
            <summary>
            Index name for unique id
            </summary>
        </member>
        <member name="F:Library.Page.dispositionName">
            <summary>
            Index name for disposition
            </summary>
        </member>
        <member name="F:Library.Page.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.Page.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.Page.nameName">
            <summary>
            Index name for automatic name
            </summary>
        </member>
        <member name="F:Library.Page.masterPageNameName">
            <summary>
            Index name for related master page name
            </summary>
        </member>
        <member name="F:Library.Page.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.Page.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.Page.objectListName">
            <summary>
            Index name for its own objects
            </summary>
        </member>
        <member name="F:Library.Page.folderObjectName">
            <summary>
            Index name for the hosted folder
            </summary>
        </member>
        <member name="F:Library.Page.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="M:Library.Page.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.Page.#ctor(Library.Page)">
            <summary>
            Copy constructor
            </summary>
            <param name="refp">input page</param>
        </member>
        <member name="M:Library.Page.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.String,Library.IContainer@)">
            <summary>
            Search a container from container list
            </summary>
            <param name="containers">all containers</param>
            <param name="searchName">container name to search</param>
            <param name="found">container</param>
            <returns>true if a container has found</returns>
        </member>
        <member name="M:Library.Page.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search a container from a list of containers and a list of contents
            </summary>
            <param name="containers">list of container</param>
            <param name="objects">list of objects</param>
            <param name="searchName">container name to search</param>
            <param name="found">container</param>
            <returns>true if a container has found</returns>
        </member>
        <member name="M:Library.Page.GenerateDesign">
            <summary>
            Generate page for design
            A page is the top-level of generation
            so, this function works with no argument
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateDesign(Library.Page)">
            <summary>
            Generate page from a referenced page
            As a page is the top-level of generation, no other page is generated
            </summary>
            <param name="refPage"></param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateDesign(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate page for design
            A page is the top-level of generation, so any argument is not needed
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateDesign(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate page for design
            A page is the top-level of generation, so any argument is not needed
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateDesign(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate page for design
            A page is the top-level of generation, so any argument is not needed
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateThumbnail">
            <summary>
            Generate a thumbnail of a page
            This function should be implemented
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateProduction">
            <summary>
            Generate page for actual website
            A page is the top-level of generation
            so, this function works with no argument
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateProduction(Library.Page)">
            <summary>
            Generate page from a referenced page
            As a page is the top-level of generation, no other page is generated
            </summary>
            <param name="refPage"></param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateProduction(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate page for actual website
            A page is the top-level of generation, so any argument is not needed
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.GenerateProduction(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate page for actual website
            A page is the top-level of generation, so any argument is not needed
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">object list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.Page.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.Page.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.Page.Disposition">
            <summary>
            Gets or sets the disposition
            </summary>
        </member>
        <member name="P:Library.Page.DispositionText">
            <summary>
            Gets or sets the disposition text
            </summary>
        </member>
        <member name="P:Library.Page.ConstraintWidth">
            <summary>
            Gets or sets the width constraint
            </summary>
        </member>
        <member name="P:Library.Page.ConstraintHeight">
            <summary>
            Gets or sets the height constraint
            </summary>
        </member>
        <member name="P:Library.Page.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.Page.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.Page.Name">
            <summary>
            Gets or sets the name of this page
            </summary>
        </member>
        <member name="P:Library.Page.MasterPageName">
            <summary>
            Gets or sets the master page name
            </summary>
        </member>
        <member name="P:Library.Page.SpecificOutput">
            <summary>
            Gets or sets a specific output
            </summary>
        </member>
        <member name="P:Library.Page.Objects">
            <summary>
            Gets objects hosted by this page
            </summary>
        </member>
        <member name="P:Library.Page.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.Page.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="P:Library.Page.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="T:Library.ParentConstraint">
            <summary>
            Parent Constraint
            It is usefull to transport and transform
            width and height contraints
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.objectName">
            <summary>
            Object Name
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.precedingWidth">
            <summary>
            Previous width
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.precedingHeight">
            <summary>
            Previous height
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.constraintWidth">
            <summary>
            Width constraint
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.constraintHeight">
            <summary>
            Height constraint
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.maximumWidth">
            <summary>
            Maximum width allowed
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.maximumHeight">
            <summary>
            Maximum height allowed
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.disposition">
            <summary>
            Disposition for the object
            </summary>
        </member>
        <member name="F:Library.ParentConstraint.border">
            <summary>
            Border size and constraint
            </summary>
        </member>
        <member name="M:Library.ParentConstraint.#ctor(System.String,System.UInt32,System.UInt32,Library.EnumConstraint,Library.EnumConstraint,System.UInt32,System.UInt32,Library.BorderConstraint)">
            <summary>
            Constructor without a disposition
            The default disposition is CENTER
            </summary>
            <param name="objectName">object name</param>
            <param name="precedingWidth">previous width</param>
            <param name="precedingHeight">previous height</param>
            <param name="constraintWidth">width constraint</param>
            <param name="constraintHeight">height constraint</param>
            <param name="maximumWidth">maximum width</param>
            <param name="maximumHeight">maximum height</param>
            <param name="border">border size and constraint</param>
        </member>
        <member name="M:Library.ParentConstraint.#ctor(System.String,System.UInt32,System.UInt32,Library.EnumConstraint,Library.EnumConstraint,System.UInt32,System.UInt32,Library.Disposition,Library.BorderConstraint)">
            <summary>
            Default constructor
            </summary>
            <param name="objectName">object name</param>
            <param name="precedingWidth">previous width</param>
            <param name="precedingHeight">previous height</param>
            <param name="constraintWidth">width constraint</param>
            <param name="constraintHeight">height constraint</param>
            <param name="maximumWidth">maximum width</param>
            <param name="maximumHeight">maximum height</param>
            <param name="disposition">disposition</param>
            <param name="border">border size and constraint</param>
        </member>
        <member name="M:Library.ParentConstraint.#ctor(System.String,Library.ParentConstraint)">
            <summary>
            Constructor from a previous parent constraint
            </summary>
            <param name="objectName">object name</param>
            <param name="parent">parent constraint</param>
        </member>
        <member name="T:Library.Project">
            <summary>
            Contains all data for a project
            </summary>
        </member>
        <member name="F:Library.Project.JavaScriptUrlName">
            <summary>
            Name of the translation label for javascript list url
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.CSSUrlName">
            <summary>
            Name of the translation label for css list url
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.ConfigurationName">
            <summary>
            Name of the translation label for configuration
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.MasterPagesName">
            <summary>
            Name of the translation label for master pages
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.MasterObjectsName">
            <summary>
            Name of the translation label for master objects
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.PagesName">
            <summary>
            Name of the translation label for pages
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.ToolsName">
            <summary>
            Name of the translation label for tools
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.FilesName">
            <summary>
            Name of the translation label for files
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.InstancesName">
            <summary>
            Name of the translation label for instances
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.FoldersName">
            <summary>
            Name of the translation label for folders
            viewed into the tree of project elements
            </summary>
        </member>
        <member name="F:Library.Project.hasErrorSaveName">
            <summary>
            Index name for error switch occurred
            </summary>
        </member>
        <member name="F:Library.Project.errorReasonName">
            <summary>
            Index name for error reason string
            </summary>
        </member>
        <member name="F:Library.Project.sculptureToolImageName">
            <summary>
            Index name for sculpture tool image
            </summary>
        </member>
        <member name="F:Library.Project.sculptureToolTextName">
            <summary>
            Index name for sculpture tool text
            </summary>
        </member>
        <member name="F:Library.Project.colorSchemeName">
            <summary>
            Index name for colorscheme text
            </summary>
        </member>
        <member name="F:Library.Project.creationDateName">
            <summary>
            Index name for creation date
            </summary>
        </member>
        <member name="F:Library.Project.modificationDateName">
            <summary>
            Index name for modification date
            </summary>
        </member>
        <member name="F:Library.Project.revisionName">
            <summary>
            Index name for revision number
            </summary>
        </member>
        <member name="F:Library.Project.configurationName">
            <summary>
            Index name for configuration
            </summary>
        </member>
        <member name="F:Library.Project.counterName">
            <summary>
            Index name for counter index to name elements
            </summary>
        </member>
        <member name="F:Library.Project.titleName">
            <summary>
            Index name for title of the project
            </summary>
        </member>
        <member name="F:Library.Project.javascriptUrlListName">
            <summary>
            Index name for list of javascript urls
            </summary>
        </member>
        <member name="F:Library.Project.masterPageListName">
            <summary>
            Index name for master page list
            </summary>
        </member>
        <member name="F:Library.Project.pageListName">
            <summary>
            Index name for page list
            </summary>
        </member>
        <member name="F:Library.Project.filesName">
            <summary>
            Index name for files
            </summary>
        </member>
        <member name="F:Library.Project.foldersName">
            <summary>
            Index name for folders
            </summary>
        </member>
        <member name="F:Library.Project.masterObjectListName">
            <summary>
            Index name for master object list
            </summary>
        </member>
        <member name="F:Library.Project.sculptureObjectListName">
            <summary>
            Index name for sculpture object list
            </summary>
        </member>
        <member name="F:Library.Project.javascriptModelListName">
            <summary>
            Index name for javascript model list
            </summary>
        </member>
        <member name="F:Library.Project.cssModelList">
            <summary>
            Index name for css model list
            </summary>
        </member>
        <member name="F:Library.Project.toolslName">
            <summary>
            Index name for folders tool
            </summary>
        </member>
        <member name="F:Library.Project.instanceObjectListName">
            <summary>
            Index name for instance object list
            </summary>
        </member>
        <member name="F:Library.Project.treeName">
            <summary>
            Index name for a tree representation by string identifier
            </summary>
        </member>
        <member name="F:Library.Project.customColorsListName">
            <summary>
            Index name for custom color list
            </summary>
        </member>
        <member name="F:Library.Project.uniqueStringsName">
            <summary>
            Index name for unique strings
            </summary>
        </member>
        <member name="F:Library.Project.traceCounter">
            <summary>
            counter for dumping element
            </summary>
        </member>
        <member name="F:Library.Project.currentProject">
            <summary>
            Keeps a reference to the current project
            </summary>
        </member>
        <member name="M:Library.Project.ConstructHierarchy">
            <summary>
            Construct the initial hierarchy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Project.FindContainer(System.String,Library.IContainer@,Library.Project.SearchContainer)">
            <summary>
            Fonction to find a container
            </summary>
            <param name="searchName">name of the container to search</param>
            <param name="found">counter found</param>
            <param name="del">delegate for recursive search</param>
            <returns>true if found</returns>
        </member>
        <member name="M:Library.Project.ReloadProject">
            <summary>
            When you reload project
            </summary>
        </member>
        <member name="M:Library.Project.Add(Library.MasterPage,System.String)">
            <summary>
            Add a master page
            given a specific path to organize project's element
            </summary>
            <param name="mp">master page</param>
            <param name="path">path</param>
        </member>
        <member name="M:Library.Project.Add(Library.MasterObject,System.String)">
            <summary>
            Add a master object
            given a specific path to organize project's element
            </summary>
            <param name="mo">master object</param>
            <param name="path">path</param>
        </member>
        <member name="M:Library.Project.Add(Library.Page,System.String)">
            <summary>
            Add a page
            given a specific path to organize project's element
            </summary>
            <param name="p">page</param>
            <param name="path">path</param>
        </member>
        <member name="M:Library.Project.Add(Library.File,System.String)">
            <summary>
            Add a file
            given a specific path to organize project's element
            </summary>
            <param name="f">file</param>
            <param name="path">path</param>
        </member>
        <member name="M:Library.Project.Add(Library.HTMLTool,System.String)">
            <summary>
            Add a tool
            given a specific path to organize project's element
            </summary>
            <param name="t">tool</param>
            <param name="path">path</param>
        </member>
        <member name="M:Library.Project.Add(Library.HTMLObject,System.String)">
            <summary>
            Add an instance
            given a specific path to organize project's element
            </summary>
            <param name="i">instance</param>
            <param name="path">path</param>
        </member>
        <member name="M:Library.Project.ImportPages(Library.Project,Library.Project)">
            <summary>
            Import all pages from an existing project
            </summary>
            <param name="src">project source</param>
            <param name="dest">project destination</param>
        </member>
        <member name="M:Library.Project.ImportTools(Library.Project,Library.Project)">
            <summary>
            Import all tools from an existing project
            </summary>
            <param name="src">project source</param>
            <param name="dest">project destination</param>
        </member>
        <member name="M:Library.Project.ImportMasterPages(Library.Project,Library.Project)">
            <summary>
            Import all master pages from an existing project
            </summary>
            <param name="src">project source</param>
            <param name="dest">project destination</param>
        </member>
        <member name="M:Library.Project.ImportMasterObjects(Library.Project,Library.Project,System.Collections.Generic.List{System.String})">
            <summary>
            Import all master object from an existing project
            </summary>
            <param name="src">project source</param>
            <param name="dest">project destination</param>
            <param name="needs">contains all subsequent elements to add</param>
        </member>
        <member name="M:Library.Project.ImportSculptures(Library.Project,Library.Project)">
            <summary>
            Import all sculptures from an existing project
            </summary>
            <param name="src">project source</param>
            <param name="dest">project destination</param>
        </member>
        <member name="M:Library.Project.Save(Library.Project,System.String,System.String)">
            <summary>
            Save project into file
            </summary>
            <param name="p">project object to save</param>
            <param name="path">path of file</param>
            <param name="fileName">file name</param>
        </member>
        <member name="M:Library.Project.Load(System.String,System.String,Library.Project.OpenProject)">
            <summary>
            Load a project
            </summary>
            <param name="path">path of file</param>
            <param name="fileName">file name</param>
            <param name="del">delegate to open project</param>
            <returns>project object</returns>
        </member>
        <member name="M:Library.Project.Load(System.String,System.String)">
            <summary>
            Load a project
            </summary>
            <param name="path">path of file</param>
            <param name="fileName">file name</param>
            <returns>project object</returns>
        </member>
        <member name="M:Library.Project.AddFile(Library.Project,System.String,System.String)">
            <summary>
            Add a file
            </summary>
            <param name="proj">project source</param>
            <param name="path">path for the directory of this file to copy</param>
            <param name="fileName">file name to add</param>
            <returns>true if added</returns>
        </member>
        <member name="M:Library.Project.AddPage(Library.Project,Library.Page,System.String)">
            <summary>
            Add a new Page
            </summary>
            <param name="proj">concerned project</param>
            <param name="p">new page</param>
            <param name="path">path for this page</param>
            <returns></returns>
        </member>
        <member name="M:Library.Project.AddTool(Library.Project,Library.HTMLTool,System.String)">
            <summary>
            Add a new Page
            </summary>
            <param name="proj">concerned project</param>
            <param name="t">new tool</param>
            <param name="path">path for this page</param>
            <returns></returns>
        </member>
        <member name="M:Library.Project.EnsureSculptureGeneration(Library.Project)">
            <summary>
            Check sculpture generation
            </summary>
            <param name="proj">project</param>
        </member>
        <member name="M:Library.Project.InstanciateSculptureTool(Library.Project,Library.CadreModel)">
            <summary>
            Generate an HtmlObject from a sculpture object
            </summary>
            <param name="proj">project source</param>
            <param name="model">model</param>
            <returns>HTMLObject constructed</returns>
        </member>
        <member name="M:Library.Project.InitializeTraceCounter">
            <summary>
            Initialize trace counter
            </summary>
        </member>
        <member name="P:Library.Project.CreationDate">
            <summary>
            Gets or sets creation date
            </summary>
        </member>
        <member name="P:Library.Project.ModificationDate">
            <summary>
            Gets or sets modification date
            Is null if new project
            </summary>
        </member>
        <member name="P:Library.Project.Revision">
            <summary>
            Gets or sets the revision value
            </summary>
        </member>
        <member name="P:Library.Project.ColorScheme">
            <summary>
            Gets or sets the color scheme
            </summary>
        </member>
        <member name="P:Library.Project.Configuration">
            <summary>
            Gets the configuration object
            </summary>
        </member>
        <member name="P:Library.Project.IncrementedCounter">
            <summary>
            Gets the current counter and increments it immediately
            </summary>
        </member>
        <member name="P:Library.Project.Title">
            <summary>
            Gets or sets the title
            </summary>
        </member>
        <member name="P:Library.Project.JavascriptUrls">
            <summary>
            Gets the list of urls of javascript
            </summary>
        </member>
        <member name="P:Library.Project.MasterPages">
            <summary>
            Gets the master page tree of string and master pages
            </summary>
        </member>
        <member name="P:Library.Project.Pages">
            <summary>
            Gets the page list
            </summary>
        </member>
        <member name="P:Library.Project.Files">
            <summary>
            Gets the file list
            </summary>
        </member>
        <member name="P:Library.Project.MasterObjects">
            <summary>
            Gets master object list
            </summary>
        </member>
        <member name="P:Library.Project.SculptureObjects">
            <summary>
            Gets sculpture object list
            </summary>
        </member>
        <member name="P:Library.Project.JavaScriptModels">
            <summary>
            Gets javascript models
            </summary>
        </member>
        <member name="P:Library.Project.CSSModels">
            <summary>
            Gets CSS models
            </summary>
        </member>
        <member name="P:Library.Project.Tools">
            <summary>
            Gets folders tool
            </summary>
        </member>
        <member name="P:Library.Project.Instances">
            <summary>
            Gets all instances
            </summary>
        </member>
        <member name="P:Library.Project.Hierarchy">
            <summary>
            Gets the hierarchy of declared elements
            </summary>
        </member>
        <member name="P:Library.Project.CustomColors">
            <summary>
            Gets Custom color list
            </summary>
        </member>
        <member name="P:Library.Project.ToolImage">
            <summary>
            Gets the scultpture tool image
            </summary>
        </member>
        <member name="P:Library.Project.ToolText">
            <summary>
            Gets the sculpture tool text
            </summary>
        </member>
        <member name="P:Library.Project.CurrentProject">
            <summary>
            Gets or sets the current project
            </summary>
        </member>
        <member name="P:Library.Project.NotSaved">
            <summary>
            Gets if the project was not saved
            also true if an error occurred during save
            </summary>
        </member>
        <member name="P:Library.Project.ErrorReason">
            <summary>
            Gets the error reasong
            </summary>
        </member>
        <member name="P:Library.Project.TraceCounter">
            <summary>
            Gets the trace counter
            </summary>
        </member>
        <member name="P:Library.Project.IncrementedTraceCounter">
            <summary>
            Gets the trace counter and increments it immediately
            </summary>
        </member>
        <member name="P:Library.Project.Unique">
            <summary>
            Gets a generation of unique strings operator
            </summary>
        </member>
        <member name="T:Library.Project.OpenProject">
            <summary>
            Delegate for open a project
            </summary>
        </member>
        <member name="T:Library.Project.SearchContainer">
            <summary>
            Search where is the container
            </summary>
            <param name="containers">list of all containers</param>
            <param name="objects">object that host a content</param>
            <param name="searchName">name to search</param>
            <param name="found">exact container if found</param>
            <returns>true if found</returns>
        </member>
        <member name="T:Library.ProjectCap">
            <summary>
            Hat of a Project
            </summary>
        </member>
        <member name="F:Library.ProjectCap.title">
            <summary>
            title
            </summary>
        </member>
        <member name="M:Library.ProjectCap.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="title">title</param>
        </member>
        <member name="P:Library.ProjectCap.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.ProjectCap.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="T:Library.Projects">
            <summary>
            Handle multiple Projects
            </summary>
        </member>
        <member name="F:Library.Projects.projects">
            <summary>
            Dictionary of projects
            </summary>
        </member>
        <member name="M:Library.Projects.Add(System.String,Library.Project)">
            <summary>
            Add a new project
            </summary>
            <param name="name">project title</param>
            <param name="p">project object</param>
        </member>
        <member name="M:Library.Projects.Remove(System.String)">
            <summary>
            Suppress a project from list
            </summary>
            <param name="name">project name</param>
        </member>
        <member name="M:Library.Projects.Activate(System.String,System.String@)">
            <summary>
            Activates project and holds previous one
            </summary>
            <param name="name">project name</param>
            <param name="previous">previous project</param>
            <returns>true if ok</returns>
        </member>
        <member name="M:Library.Projects.Reactivate(System.String)">
            <summary>
            Reactivates project
            </summary>
            <param name="name">project name</param>
            <returns>true if ok</returns>
        </member>
        <member name="M:Library.Projects.TrySelect(System.String,Library.Project@)">
            <summary>
            Try to select an existing project
            </summary>
            <param name="name">project name</param>
            <param name="p">project handler</param>
            <returns>true if handled</returns>
        </member>
        <member name="T:Library.Rectangle">
            <summary>
            Class for defining a rectangle
            </summary>
        </member>
        <member name="F:Library.Rectangle.leftName">
            <summary>
            Index name of left value
            </summary>
        </member>
        <member name="F:Library.Rectangle.rightName">
            <summary>
            Index name of right value
            </summary>
        </member>
        <member name="F:Library.Rectangle.topName">
            <summary>
            Index name of top value
            </summary>
        </member>
        <member name="F:Library.Rectangle.bottomName">
            <summary>
            Index name of bottom value
            </summary>
        </member>
        <member name="M:Library.Rectangle.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="left">left value</param>
            <param name="right">right value</param>
            <param name="top">top value</param>
            <param name="bottom">bottom value</param>
        </member>
        <member name="M:Library.Rectangle.#ctor(System.String)">
            <summary>
            Constructor from a string
            </summary>
            <param name="rectStr">string representation of a rectangle</param>
        </member>
        <member name="M:Library.Rectangle.ConvertToInt(System.String)">
            <summary>
            Convert value string to an int
            </summary>
            <param name="value">value string</param>
            <returns>int</returns>
        </member>
        <member name="M:Library.Rectangle.ToString">
            <summary>
            Gets rectangle to string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="M:Library.Rectangle.Set(System.String,System.String)">
            <summary>
            Set an adapted value
            given the value name
            </summary>
            <param name="type">type name</param>
            <param name="value">string value</param>
        </member>
        <member name="M:Library.Rectangle.op_Addition(Library.Rectangle,Library.Rectangle)">
            <summary>
            Operator to sum rectangle with an another
            </summary>
            <param name="from">rectangle source and destination</param>
            <param name="plus">rectangle to size</param>
            <returns>rectangle modified</returns>
        </member>
        <member name="M:Library.Rectangle.TryParse(System.String,Library.Rectangle@)">
            <summary>
            Try parsing a rect string
            </summary>
            <param name="s">string</param>
            <param name="rect">rectangle out</param>
            <returns>true if parse ok</returns>
        </member>
        <member name="M:Library.Rectangle.IsEmpty">
            <summary>
            Test if an empty rectangle
            </summary>
            <returns>true if empty</returns>
        </member>
        <member name="M:Library.Rectangle.Clone">
            <summary>
            Clone this rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="P:Library.Rectangle.Left">
            <summary>
            Gets or sets the left value
            </summary>
        </member>
        <member name="P:Library.Rectangle.Right">
            <summary>
            Gets or sets the right value
            </summary>
        </member>
        <member name="P:Library.Rectangle.Top">
            <summary>
            Gets or sets the top value
            </summary>
        </member>
        <member name="P:Library.Rectangle.Bottom">
            <summary>
            Gets or sets the bottom value
            </summary>
        </member>
        <member name="T:Library.SizedRectangle">
            <summary>
            A rectangle with its size in width and height
            </summary>
        </member>
        <member name="F:Library.SizedRectangle.widthName">
            <summary>
            Index name of width value
            </summary>
        </member>
        <member name="F:Library.SizedRectangle.heightName">
            <summary>
            Index name of height value
            </summary>
        </member>
        <member name="M:Library.SizedRectangle.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.SizedRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="left">left corner position</param>
            <param name="top">top corner position</param>
        </member>
        <member name="M:Library.SizedRectangle.ToString">
            <summary>
            Gets SizedRectangle to string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="P:Library.SizedRectangle.Width">
            <summary>
            Gets the width value
            </summary>
        </member>
        <member name="P:Library.SizedRectangle.Height">
            <summary>
            Gets the height value
            </summary>
        </member>
        <member name="T:Library.AreaSizedRectangle">
            <summary>
            An area sized Rectangle
            </summary>
        </member>
        <member name="F:Library.AreaSizedRectangle.countWidthName">
            <summary>
            Index name of width value
            </summary>
        </member>
        <member name="F:Library.AreaSizedRectangle.countHeightName">
            <summary>
            Index name of height value
            </summary>
        </member>
        <member name="M:Library.AreaSizedRectangle.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.AreaSizedRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="countWidth">width count</param>
            <param name="countHeight">height count</param>
            <param name="left">left corner position</param>
            <param name="top">top corner position</param>
        </member>
        <member name="M:Library.AreaSizedRectangle.ToString">
            <summary>
            Gets SizedRectangle to string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="P:Library.AreaSizedRectangle.CountWidth">
            <summary>
            Gets the count width value
            </summary>
        </member>
        <member name="P:Library.AreaSizedRectangle.CountHeight">
            <summary>
            Gets the count height value
            </summary>
        </member>
        <member name="T:Library.RefObject">
            <summary>
            A reference object
            </summary>
        </member>
        <member name="F:Library.RefObject.Page">
            <summary>
            Page name
            </summary>
        </member>
        <member name="F:Library.RefObject.MasterPage">
            <summary>
            Master page name
            </summary>
        </member>
        <member name="F:Library.RefObject.MasterObject">
            <summary>
            Master object name
            </summary>
        </member>
        <member name="F:Library.RefObject.Tool">
            <summary>
            Tool
            </summary>
        </member>
        <member name="F:Library.RefObject.Instance">
            <summary>
            Instances
            </summary>
        </member>
        <member name="F:Library.RefObject.File">
            <summary>
            Files
            </summary>
        </member>
        <member name="F:Library.RefObject.objectTypeName">
            <summary>
            Index name for object type
            </summary>
        </member>
        <member name="F:Library.RefObject.titleName">
            <summary>
            Index name for title
            </summary>
        </member>
        <member name="F:Library.RefObject.directObjectName">
            <summary>
            Index name for direct object
            </summary>
        </member>
        <member name="M:Library.RefObject.#ctor(System.String,System.String,Library.HTMLObject)">
            <summary>
            Default constructor
            </summary>
            <param name="objectType">an object type name</param>
            <param name="instanceName">an instance name</param>
            <param name="source">a source object</param>
        </member>
        <member name="M:Library.RefObject.#ctor(Library.RefObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="r">ref object to copy</param>
        </member>
        <member name="M:Library.RefObject.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.RefObject.Type">
            <summary>
            Gets the object type
            </summary>
        </member>
        <member name="P:Library.RefObject.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="P:Library.RefObject.DirectObject">
            <summary>
            Gets the direct object (uniquely existing)
            </summary>
        </member>
        <member name="T:Library.SculptureObject">
            <summary>
            Sculpture object definition
            </summary>
        </member>
        <member name="F:Library.SculptureObject.uniqueName">
            <summary>
            Index name for unique id
            </summary>
        </member>
        <member name="F:Library.SculptureObject.titleName">
            <summary>
            Index name for title
            </summary>
        </member>
        <member name="F:Library.SculptureObject.cadreListName">
            <summary>
            Index name for cadres
            </summary>
        </member>
        <member name="F:Library.SculptureObject.generatedSculptureListName">
            <summary>
            Index name for generated sculptures
            </summary>
        </member>
        <member name="F:Library.SculptureObject.distancesName">
            <summary>
            Index name for distances
            </summary>
        </member>
        <member name="M:Library.SculptureObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.SculptureObject.#ctor(Library.SculptureObject)">
            <summary>
            Copy constructor
            </summary>
            <param name="obj">object source to copy</param>
        </member>
        <member name="M:Library.SculptureObject.cm_Updated(System.Object,Library.CadreIndexArgs)">
            <summary>
            Cadre model updater
            </summary>
            <param name="sender">source sender</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:Library.SculptureObject.GenerateGrannes">
            <summary>
            Generate grannes
            </summary>
            <returns>hash set of granne</returns>
        </member>
        <member name="M:Library.SculptureObject.SortGranne(System.Collections.Generic.HashSet{Library.Granne})">
            <summary>
            Sorting grannes
            </summary>
            <param name="hs">hash set</param>
            <returns>sorted grannes</returns>
        </member>
        <member name="M:Library.SculptureObject.FillObjects(Library.Project,Library.GeneratedSculpture,Library.Granne[0:,0:])">
            <summary>
            Fill objects
            </summary>
            <param name="proj">project to edit</param>
            <param name="gs">generated sculpture</param>
            <param name="tab">two dimensional tabular granne</param>
        </member>
        <member name="M:Library.SculptureObject.GetCrossRectList(Library.CadreModel)">
            <summary>
            Gets rectangle cross list
            </summary>
            <param name="cm">cadre model</param>
            <returns>list of rectangle</returns>
        </member>
        <member name="M:Library.SculptureObject.GetPreviousGeneration(System.String)">
            <summary>
            Get the previous generation
            </summary>
            <param name="type">type of generation</param>
            <returns>list of generated sculpture</returns>
        </member>
        <member name="M:Library.SculptureObject.Reinit">
            <summary>
            Reinitialize
            </summary>
        </member>
        <member name="M:Library.SculptureObject.AddNewCadreModel(Library.CadreModel)">
            <summary>
            Add a new cadre model
            </summary>
            <param name="cm">cadre model to add</param>
        </member>
        <member name="M:Library.SculptureObject.CreateProjectObject(Library.Project,Library.GeneratedSculpture)">
            <summary>
            Create all objects for sculpture generation on a project
            </summary>
            <param name="proj">project to edit</param>
            <param name="gs">generated sculpture</param>
        </member>
        <member name="M:Library.SculptureObject.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.SculptureObject.Unique">
            <summary>
            Gets or sets the unique id
            </summary>
        </member>
        <member name="P:Library.SculptureObject.TypeName">
            <summary>
            Gets the type name
            </summary>
        </member>
        <member name="P:Library.SculptureObject.ElementTitle">
            <summary>
            Gets the element title
            </summary>
        </member>
        <member name="P:Library.SculptureObject.Title">
            <summary>
            Gets or sets the title
            </summary>
        </member>
        <member name="P:Library.SculptureObject.Cadres">
            <summary>
            Gets cadres
            </summary>
        </member>
        <member name="P:Library.SculptureObject.Generated">
            <summary>
            Gets generated sculptures
            </summary>
        </member>
        <member name="P:Library.SculptureObject.Distances">
            <summary>
            Gets the distances
            </summary>
        </member>
        <member name="T:Library.DistanceCadreModel">
            <summary>
            Distance computed for a cadre model
            object that can be compared by equality
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.distanceXName">
            <summary>
            Index name for distance on x axis
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.distanceYName">
            <summary>
            Index name for distance on y axis
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.positionXName">
            <summary>
            Index name for position on x axis
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.positionYName">
            <summary>
            Index name for position on y axis
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.crossXName">
            <summary>
            Index name for cross on x axis
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.crossYName">
            <summary>
            Index name for cross on y axis
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.refCadreModelPositiveIndexName">
            <summary>
            Index name for positive index
            </summary>
        </member>
        <member name="F:Library.DistanceCadreModel.refCadreModelNegativeIndexName">
            <summary>
            Index name for negative index
            </summary>
        </member>
        <member name="M:Library.DistanceCadreModel.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.DistanceCadreModel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="dx">distance x</param>
            <param name="dy">distance y</param>
            <param name="px">position x</param>
            <param name="py">position y</param>
            <param name="cx">cross x</param>
            <param name="cy">cross y</param>
            <param name="positiveIndex">positive index</param>
            <param name="negativeIndex">negative index</param>
        </member>
        <member name="M:Library.DistanceCadreModel.#ctor(Library.CadreModel,Library.CadreModel)">
            <summary>
            Constructor with two cadre model
            </summary>
            <param name="cm1">cadre model one</param>
            <param name="cm2">cadre model two</param>
        </member>
        <member name="M:Library.DistanceCadreModel.Uniform(Library.CadreModel,Library.CadreModel)">
            <summary>
            Uniformizer
            </summary>
            <param name="cm2">cadre model one</param>
            <param name="cm1">cadre model two</param>
        </member>
        <member name="M:Library.DistanceCadreModel.NegativeIntersectionBy(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes negative intersection
            </summary>
            <param name="dist">distance</param>
            <param name="pos">position</param>
            <param name="cross">croisement</param>
            <param name="before">avant</param>
            <param name="after">après</param>
            <returns>point</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.AimentedContact(Library.CadreModel,Library.CadreModel)">
            <summary>
            Aimented contact between two cadre mode
            </summary>
            <param name="cm2">cadre model two</param>
            <param name="cm1">cadre model one</param>
        </member>
        <member name="M:Library.DistanceCadreModel.HasIntersection(System.Collections.Generic.List{Library.CadreModel},Library.CadreModel)">
            <summary>
            Test if an intersection exists
            </summary>
            <param name="src">cadre model list</param>
            <param name="cm">cadre model to test</param>
            <returns>rectangle of intersection</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.Dump(System.Collections.Generic.List{Library.DistanceCadreModel})">
            <summary>
            Dumping list
            </summary>
            <param name="list">list of distance between cadre model list</param>
            <returns>string dump</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.CrossRect(System.Collections.Generic.List{Library.CadreModel},System.Collections.Generic.List{Library.DistanceCadreModel},Library.CadreModel)">
            <summary>
            Gets the crossed list of rectangle
            </summary>
            <param name="src">cadre model list</param>
            <param name="list">distance cadre model list</param>
            <param name="cm">specific cadre model</param>
            <returns>a list of rectangle</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.FindIntersect(System.Collections.Generic.List{Library.DistanceCadreModel},System.Collections.Generic.List{Library.CadreModel},Library.CadreModel)">
            <summary>
            Find an intersection between cadre model
            </summary>
            <param name="list">list of distance cadre model</param>
            <param name="src">list of cadre model</param>
            <param name="cm">specific cadre model</param>
            <returns>a list of rectangle</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.Find(System.Collections.Generic.List{Library.CadreModel},System.Int32)">
            <summary>
            Find a specific cadre model from a list
            </summary>
            <param name="src">source cadre model list</param>
            <param name="index">specific index</param>
            <returns>cadre model that has the same index</returns>
        </member>
        <member name="M:Library.DistanceCadreModel.UpdateDistance(System.Collections.Generic.List{Library.DistanceCadreModel},System.Collections.Generic.List{Library.CadreModel},Library.CadreModel)">
            <summary>
            Update distance
            </summary>
            <param name="list">list of distance cadre model</param>
            <param name="src">list of cadre model</param>
            <param name="cmChanged">cadre model that has changed</param>
        </member>
        <member name="M:Library.DistanceCadreModel.AddNewCadre(System.Collections.Generic.List{Library.DistanceCadreModel},System.Collections.Generic.List{Library.CadreModel},Library.CadreModel)">
            <summary>
            Add a new cadre model
            </summary>
            <param name="list">list of distance cadre model</param>
            <param name="src">cadre model source list</param>
            <param name="cmNew">new cadre model</param>
        </member>
        <member name="M:Library.DistanceCadreModel.RemoveCadre(System.Collections.Generic.List{Library.DistanceCadreModel},Library.CadreModel)">
            <summary>
            Remove cadre model
            </summary>
            <param name="list">list of distance cadre model</param>
            <param name="cmToRemove">cadre model to remove</param>
        </member>
        <member name="M:Library.DistanceCadreModel.Equals(Library.DistanceCadreModel,Library.DistanceCadreModel)">
            <summary>
            Test if two object are equals or not
            </summary>
            <param name="x">object one</param>
            <param name="y">object two</param>
            <returns>true if equals</returns>
        </member>
        <member name="T:Library.CadreIndexArgs">
            <summary>
            Cadre index argument
            </summary>
        </member>
        <member name="M:Library.CadreIndexArgs.#ctor(Library.CadreModel)">
            <summary>
            Default constructor
            </summary>
            <param name="cm">cadre model</param>
        </member>
        <member name="P:Library.CadreIndexArgs.CadreModel">
            <summary>
            Gets cadre model transmission
            </summary>
        </member>
        <member name="T:Library.CadreIndexPaintArgs">
            <summary>
            Cadre index argument during paint
            </summary>
        </member>
        <member name="M:Library.CadreIndexPaintArgs.#ctor(Library.CadreModel,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Default Constructor
            </summary>
            <param name="cm">cadre model</param>
            <param name="p">paint event argument</param>
        </member>
        <member name="P:Library.CadreIndexPaintArgs.CadreModel">
            <summary>
            Gets cadre model transmission
            </summary>
        </member>
        <member name="P:Library.CadreIndexPaintArgs.Paint">
            <summary>
            Gets paint event argument
            </summary>
        </member>
        <member name="T:Library.AdjustementSize">
            <summary>
            Adjusts size and keeps width and height constraints and values
            </summary>
        </member>
        <member name="F:Library.AdjustementSize.constraintWidth">
            <summary>
            Constraint width
            </summary>
        </member>
        <member name="F:Library.AdjustementSize.constraintHeight">
            <summary>
            Constraint height
            </summary>
        </member>
        <member name="F:Library.AdjustementSize.width">
            <summary>
            Width value
            </summary>
        </member>
        <member name="F:Library.AdjustementSize.height">
            <summary>
            Height value
            </summary>
        </member>
        <member name="M:Library.AdjustementSize.#ctor(Library.EnumConstraint,Library.EnumConstraint,System.UInt32,System.UInt32)">
            <summary>
            Default constructor
            </summary>
            <param name="constraintWidth">width constraint</param>
            <param name="constraintHeight">height constraint</param>
            <param name="width">width value</param>
            <param name="height">height value</param>
        </member>
        <member name="P:Library.AdjustementSize.ConstraintWidth">
            <summary>
            Gets or sets width constraint
            </summary>
        </member>
        <member name="P:Library.AdjustementSize.ConstraintHeight">
            <summary>
            Gets or sets height constraint
            </summary>
        </member>
        <member name="P:Library.AdjustementSize.Width">
            <summary>
            Gets or sets width value
            </summary>
        </member>
        <member name="P:Library.AdjustementSize.Height">
            <summary>
            Gets or sets height value
            </summary>
        </member>
        <member name="T:Library.SizeCompute">
            <summary>
            Static class that compute size based on width and height constraint
            </summary>
        </member>
        <member name="M:Library.SizeCompute.CheckConstraints(Library.AdjustementSize,Library.AdjustementSize)">
            <summary>
            Check constraints
            </summary>
            <param name="container">container adjustement size</param>
            <param name="content">content adjustement size</param>
        </member>
        <member name="M:Library.SizeCompute.CheckConstraints(Library.HorizontalZone)">
            <summary>
            Computes a constraint adjustement size
            for an horizontal area
            </summary>
            <param name="hz">Horizontal area</param>
            <returns>an adjustement size for horizontal area</returns>
        </member>
        <member name="M:Library.SizeCompute.ComputeHTMLObject(Library.Project,Library.HTMLObject)">
            <summary>
            Create an adjustement size agains a html object
            </summary>
            <param name="p">project to get relative object contained from given html object</param>
            <param name="obj">Html object related</param>
            <returns>adjustement size</returns>
        </member>
        <member name="M:Library.SizeCompute.ComputeVerticalZones(Library.Project,Library.VerticalZone,System.Collections.Generic.List{Library.HTMLObject})">
            <summary>
            Computes a constraint adjustement size
            for a vertical area
            </summary>
            <param name="p">project with related elements</param>
            <param name="vz">vertical area</param>
            <param name="objects">list of html objects</param>
            <returns>an adjustement size for vertical area</returns>
        </member>
        <member name="M:Library.SizeCompute.ComputeHorizontalZones(Library.Project,Library.HorizontalZone,System.Collections.Generic.List{Library.HTMLObject})">
            <summary>
            Computes all vertical areas from an horizontal area
            </summary>
            <param name="p">project with related elements</param>
            <param name="hz">horizontal zone</param>
            <param name="objects">list of html objects</param>
            <returns></returns>
        </member>
        <member name="M:Library.SizeCompute.ComputeMasterObject(Library.Project,Library.MasterObject)">
            <summary>
            Computes the adjustement size for a master object
            </summary>
            <param name="p">given a project</param>
            <param name="mo">given a master object</param>
            <returns>an adjustement size</returns>
        </member>
        <member name="M:Library.SizeCompute.ComputeMasterPage(Library.Project,Library.MasterPage)">
            <summary>
            Computes the adjustement size for a master page
            </summary>
            <param name="p">given a project</param>
            <param name="mp">given a master page</param>
            <returns>an adjustement size</returns>
        </member>
        <member name="M:Library.SizeCompute.ComputePage(Library.Project,Library.Page)">
            <summary>
            Computes the adjustement size for a page
            </summary>
            <param name="p">given a project</param>
            <param name="page">given a page</param>
            <returns>an adjustement size</returns>
        </member>
        <member name="T:Library.Leaf`1">
            <summary>
            A leaf of a tree
            </summary>
            <typeparam name="E">data type content</typeparam>
        </member>
        <member name="F:Library.Leaf`1.elementName">
            <summary>
            Index name for element
            </summary>
        </member>
        <member name="F:Library.Leaf`1.isSelectedName">
            <summary>
            Index name for boolean selected
            </summary>
        </member>
        <member name="M:Library.Leaf`1.#ctor(`0)">
            <summary>
            Constructor initialization with an element
            </summary>
            <param name="element">element</param>
        </member>
        <member name="M:Library.Leaf`1.#ctor">
            <summary>
            Emtpy constructor
            </summary>
        </member>
        <member name="M:Library.Leaf`1.#ctor(Library.Leaf{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="from">from this leaf</param>
        </member>
        <member name="M:Library.Leaf`1.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.Leaf`1.Object">
            <summary>
            Gets or sets the object in a leaf node
            element can be null
            </summary>
        </member>
        <member name="P:Library.Leaf`1.IsSelected">
            <summary>
            Gets or sets if it is a selected leaf
            </summary>
        </member>
        <member name="T:Library.Node`2">
            <summary>
            A node in a tree
            </summary>
            <typeparam name="T">data type element of node list</typeparam>
            <typeparam name="E">data type element leaf</typeparam>
        </member>
        <member name="F:Library.Node`2.subNodeListName">
            <summary>
            Index name for sub-node list of type Node&lt;T,E&gt;
            </summary>
        </member>
        <member name="F:Library.Node`2.elementListName">
            <summary>
            Index name for element list of type Leaf&lt;E&gt;
            </summary>
        </member>
        <member name="F:Library.Node`2.isSelectedName">
            <summary>
            Index name for boolean selected
            </summary>
        </member>
        <member name="F:Library.Node`2.elementNodeName">
            <summary>
            Index name for node value (T)
            </summary>
        </member>
        <member name="F:Library.Node`2.parentNodeName">
            <summary>
            Index name for the unique parent node
            </summary>
        </member>
        <member name="M:Library.Node`2.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.Node`2.#ctor(`0)">
            <summary>
            Constructor with a node value
            </summary>
            <param name="nodeValue">node value</param>
        </member>
        <member name="M:Library.Node`2.#ctor(`0,Library.Leaf{`1})">
            <summary>
            Constructor with a leaf element
            can contains nodes
            </summary>
            <param name="nodeValue">node value</param>
            <param name="leaf">first element leaf</param>
        </member>
        <member name="M:Library.Node`2.#ctor(`0,System.Collections.Generic.IEnumerable{Library.Leaf{`1}})">
            <summary>
            Constructor with an enumerable leaf list
            </summary>
            <param name="nodeValue">node value</param>
            <param name="leafs">leaf enumeration</param>
        </member>
        <member name="M:Library.Node`2.#ctor(Library.Node{`0,`1})">
            <summary>
            Copy constructor
            </summary>
            <param name="from">element to copy</param>
        </member>
        <member name="M:Library.Node`2.AddNode(Library.Node{`0,`1})">
            <summary>
            Add a node
            </summary>
            <param name="node">node</param>
        </member>
        <member name="M:Library.Node`2.AddLeaf(`1)">
            <summary>
            Add a leaf
            </summary>
            <param name="leaf">leaf to add</param>
        </member>
        <member name="M:Library.Node`2.EnumerateSelected(System.Boolean,System.Collections.Generic.IEnumerable{`0},System.ComponentModel.BindingList{System.Collections.Generic.KeyValuePair{System.Collections.Generic.IEnumerable{`0},`1}})">
            <summary>
            Enumerate selected nodes and add to the binding list
            </summary>
            <param name="isSelected">true if parent node is selected</param>
            <param name="path">complete path of this node</param>
            <param name="b">binding list input</param>
        </member>
        <member name="M:Library.Node`2.Find(`0)">
            <summary>
            Search an element
            </summary>
            <param name="search">element successors</param>
            <returns>the existing node</returns>
        </member>
        <member name="M:Library.Node`2.Find(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Search an element
            </summary>
            <param name="search">element successors</param>
            <returns>the existing node</returns>
        </member>
        <member name="M:Library.Node`2.GetNodesEnumerator">
            <summary>
            Gets the enumerator of sub nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Node`2.GetLeafEnumerator">
            <summary>
            Gets the enumerator of sub nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Node`2.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.Node`2.Parent">
            <summary>
            Gets the unique parent of this node
            </summary>
        </member>
        <member name="P:Library.Node`2.NodeValue">
            <summary>
            Gets or sets the node value
            </summary>
        </member>
        <member name="P:Library.Node`2.SubNodes">
            <summary>
            Gets the enumerable node elements
            </summary>
        </member>
        <member name="P:Library.Node`2.Elements">
            <summary>
            Gets enumerable leaf elements
            </summary>
        </member>
        <member name="P:Library.Node`2.ListOfElement">
            <summary>
            Gets the list of element
            </summary>
        </member>
        <member name="P:Library.Node`2.ListOfNodes">
            <summary>
            Gets the list of sub nodes
            </summary>
        </member>
        <member name="P:Library.Node`2.IsSelected">
            <summary>
            Gets or sets if it is a selected node
            </summary>
        </member>
        <member name="T:Library.Tree`2">
            <summary>
            A tree class
            </summary>
            <typeparam name="T">data type element of node</typeparam>
            <typeparam name="E">data type element of leaf</typeparam>
        </member>
        <member name="M:Library.Tree`2.#ctor(`0)">
            <summary>
            Constructor with no argument
            </summary>
        </member>
        <member name="M:Library.Tree`2.#ctor(Library.Node{`0,`1})">
            <summary>
            Constructs a new tree and attach a node as root
            </summary>
            <param name="node">node tree</param>
        </member>
        <member name="M:Library.Tree`2.#ctor(Library.Tree{`0,`1})">
            <summary>
            Copy constructor
            </summary>
            <param name="from">tree to copy</param>
        </member>
        <member name="M:Library.Tree`2.EnumerateSelected(System.ComponentModel.BindingList{System.Collections.Generic.KeyValuePair{System.Collections.Generic.IEnumerable{`0},`1}},System.Boolean)">
            <summary>
            Enumerate all nodes and sub nodes
            if one is selected, add into the supplied binding list
            </summary>
            <param name="b">binding list input</param>
            <param name="all">true if automatic 'all selected'</param>
        </member>
        <member name="M:Library.Tree`2.GetEnumerator">
            <summary>
            Enumerate nodes
            </summary>
            <returns>an enumerator</returns>
        </member>
        <member name="M:Library.Tree`2.Add(`0)">
            <summary>
            Adds a new node data content object as a child of the current node
            </summary>
            <param name="obj">node object</param>
        </member>
        <member name="M:Library.Tree`2.Add(`1)">
            <summary>
            Add a new leaf data content object as a child of the current node
            </summary>
            <param name="obj">leaf object</param>
        </member>
        <member name="M:Library.Tree`2.Push">
            <summary>
            Move into the inserted last child of the current node
            </summary>
        </member>
        <member name="M:Library.Tree`2.Pop">
            <summary>
            Up move
            </summary>
        </member>
        <member name="P:Library.Tree`2.Root">
            <summary>
            Root node tree
            </summary>
        </member>
        <member name="P:Library.Tree`2.Current">
            <summary>
            Current node
            </summary>
        </member>
        <member name="P:Library.Tree`2.RootCount">
            <summary>
            Number of root nodes
            </summary>
        </member>
        <member name="P:Library.Tree`2.Recent">
            <summary>
            Inserted last node 
            </summary>
        </member>
        <member name="T:Library.UniqueStrings">
            <summary>
            Class to stand unique strings
            </summary>
        </member>
        <member name="F:Library.UniqueStrings.list">
            <summary>
             list of admitted chars
            </summary>
        </member>
        <member name="F:Library.UniqueStrings.maxDepth">
            <summary>
            maximum size of the string length
            threshold of possibilites (length list)^6
            </summary>
        </member>
        <member name="F:Library.UniqueStrings.counterName">
            <summary>
            Index Name for counter
            </summary>
        </member>
        <member name="M:Library.UniqueStrings.#ctor">
            <summary>
            Constructs a new instance
            </summary>
        </member>
        <member name="M:Library.UniqueStrings.ComputeNewString">
            <summary>
            Create a new unique name and increment pointer
            </summary>
            <returns>new unique name</returns>
        </member>
        <member name="P:Library.UniqueStrings.Counter">
            <summary>
            Gets or sets the counter position
            </summary>
        </member>
        <member name="T:Library.VerticalZone">
            <summary>
            Defines a vertical area
            A vertical area is a cell from a table with rows and columns
            A vertical area is a host container for objects html, master object, tool or table
            </summary>
        </member>
        <member name="F:Library.VerticalZone.dispositionName">
            <summary>
            Index name for disposition
            </summary>
        </member>
        <member name="F:Library.VerticalZone.constraintWidthName">
            <summary>
            Index name for width constraint
            </summary>
        </member>
        <member name="F:Library.VerticalZone.constraintHeightName">
            <summary>
            Index name for height constraint
            </summary>
        </member>
        <member name="F:Library.VerticalZone.automaticNameName">
            <summary>
            Index name for automatic name
            </summary>
        </member>
        <member name="F:Library.VerticalZone.automaticIdName">
            <summary>
            Index name for automatic id
            </summary>
        </member>
        <member name="F:Library.VerticalZone.countingLinesName">
            <summary>
            Index name for counting lines
            </summary>
        </member>
        <member name="F:Library.VerticalZone.countingColumnsName">
            <summary>
            Index name for counting column
            </summary>
        </member>
        <member name="F:Library.VerticalZone.widthName">
            <summary>
            Index name for width value
            </summary>
        </member>
        <member name="F:Library.VerticalZone.heightName">
            <summary>
            Index name for height value
            </summary>
        </member>
        <member name="F:Library.VerticalZone.eventsName">
            <summary>
            Index name for events
            </summary>
        </member>
        <member name="F:Library.VerticalZone.javascriptName">
            <summary>
            Index name for javascript code
            </summary>
        </member>
        <member name="F:Library.VerticalZone.javascriptOnloadName">
            <summary>
            Index name for javascript onload code
            </summary>
        </member>
        <member name="F:Library.VerticalZone.cssName">
            <summary>
            Index name for css styles
            </summary>
        </member>
        <member name="M:Library.VerticalZone.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Library.VerticalZone.#ctor(Library.VerticalZone)">
            <summary>
            Copy constructor
            </summary>
            <param name="vz">vertical zone to copy from</param>
        </member>
        <member name="M:Library.VerticalZone.SearchContainer(System.Collections.Generic.List{Library.IContainer},System.Collections.Generic.List{Library.IContent},System.String,Library.IContainer@)">
            <summary>
            Search a container by name existing from all containers, all content
            and returns the result
            </summary>
            <param name="containers">all containers</param>
            <param name="objects">all contents</param>
            <param name="searchName">container to search</param>
            <param name="found">container result</param>
            <returns>true if the container has found</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignDIV">
            <summary>
            Generate an HTML DIV tag from null for design
            A vertical area is hosted by an inner HTML tag
            this inner HTML tag must exist to work fine
            so, a vertical area do not generate a free DIV
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master page generates the page
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignDIV(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from null for design
            A vertical area is hosted by an inner HTML tag table
            this inner HTML tag table must exist to work fine
            so, a vertical area do not generate a direct DIV starting at a page
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from null for design
            A vertical area is hosted by an inner HTML tag table
            this inner HTML tag table must exist to work fine
            so, a vertical area do not generate a direct TABLE starting at a page
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignTable(Library.Page,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a page contains master objects related
            </summary>
            <param name="refPage">page reference</param>
            <param name="objects">master objects</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateDesignTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateProductionDIV(Library.Page)">
            <summary>
            Generate an HTML DIV tag from null for actual website
            A vertical area is hosted by an inner HTML tag
            this inner HTML tag must exist to work fine
            so, a vertical area do not generate a free DIV
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateProductionDIV(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master page generates the page
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateProductionDIV(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML DIV tag for actual website
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateProductionTable(Library.Page)">
            <summary>
            Generate an HTML TABLE tag from null for actual website
            A vertical area is hosted by an inner HTML tag table
            this inner HTML tag table must exist to work fine
            so, a vertical area do not generate a direct DIV starting at a page
            </summary>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateProductionTable(Library.Page,Library.MasterPage,Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual website
            a given master page generates the page
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.GenerateProductionTable(Library.Page,Library.MasterPage,System.Collections.Generic.List{Library.MasterObject},Library.ParentConstraint)">
            <summary>
            Generate an HTML TABLE tag for actual design
            a given master page generates the page
            a page contains master objects related
            restricted objects in page are computed equally
            </summary>
            <param name="refPage">page reference</param>
            <param name="masterRefPage">master page reference</param>
            <param name="objects">master objects list</param>
            <param name="parentConstraint">parent constraint</param>
            <returns>html output</returns>
        </member>
        <member name="M:Library.VerticalZone.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="P:Library.VerticalZone.Disposition">
            <summary>
            Gets or sets the disposition
            </summary>
        </member>
        <member name="P:Library.VerticalZone.DispositionText">
            <summary>
            Gets or sets a disposition as a string text
            </summary>
        </member>
        <member name="P:Library.VerticalZone.ConstraintWidth">
            <summary>
            Gets or sets the width constraint
            </summary>
        </member>
        <member name="P:Library.VerticalZone.ConstraintHeight">
            <summary>
            Gets or sets the height constraint
            </summary>
        </member>
        <member name="P:Library.VerticalZone.Name">
            <summary>
            Gets or sets the automatic name
            </summary>
        </member>
        <member name="P:Library.VerticalZone.Id">
            <summary>
            Gets or sets the automatic id
            </summary>
        </member>
        <member name="P:Library.VerticalZone.CountLines">
            <summary>
            Gets or sets the counting lines
            </summary>
        </member>
        <member name="P:Library.VerticalZone.CountColumns">
            <summary>
            Gets or sets the counting columns
            </summary>
        </member>
        <member name="P:Library.VerticalZone.Width">
            <summary>
            Gets or sets the width value
            </summary>
        </member>
        <member name="P:Library.VerticalZone.HtmlWidth">
            <summary>
            Gets inner box width
            empty padding css left and right
            </summary>
        </member>
        <member name="P:Library.VerticalZone.Height">
            <summary>
            Gets or sets the height value
            </summary>
        </member>
        <member name="P:Library.VerticalZone.HtmlHeight">
            <summary>
            Gets inner box height
            empty padding css top and bottom
            </summary>
        </member>
        <member name="P:Library.VerticalZone.CSS">
            <summary>
            Gets the css code
            </summary>
        </member>
        <member name="P:Library.VerticalZone.Events">
            <summary>
            Gets events
            </summary>
        </member>
        <member name="P:Library.VerticalZone.JavaScript">
            <summary>
            Gets the javascript code
            </summary>
        </member>
        <member name="P:Library.VerticalZone.JavaScriptOnLoad">
            <summary>
            Gets the javascript on load code
            </summary>
        </member>
        <member name="P:Library.VerticalZone.JavaScriptOnLoadSource">
            <summary>
            Gets or sets the javascript on load source code
            </summary>
        </member>
        <member name="P:Library.VerticalZone.JavaScriptSource">
            <summary>
            Gets or sets the javascript source
            </summary>
        </member>
        <member name="P:Library.VerticalZone.Stringified">
            <summary>
            Stringified vertical area
            for debugging
            </summary>
        </member>
    </members>
</doc>
